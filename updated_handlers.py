#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
"""

import logging
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from database import Database
from config import ADMIN_USER_ID, MOOD_EMOJIS, BOT_INFO, NOTIFICATION_SETTINGS, RATE_LIMIT
from utils import rate_limit, format_datetime, get_user_mention, split_text, sanitize_input
from data.tests import TESTS, TEST_CATEGORIES
from data.new_tests import NEW_TESTS, NEW_TEST_CATEGORIES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
ALL_TESTS = {**TESTS, **NEW_TESTS}
ALL_TEST_CATEGORIES = {**TEST_CATEGORIES, **NEW_TEST_CATEGORIES}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ---
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = 0

# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
ASKING_QUESTION = 1
ADMIN_REPLYING = 2

# –¢–µ—Å—Ç—ã
CHOOSING_TEST = 1
CONFIRMING_TEST = 2
TAKING_TEST = 3
SHOWING_RESULT = 4

# –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏
CHOOSING_TECHNIQUE = 1
SHOWING_TECHNIQUE = 2

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
CHOOSING_MOOD = 1
ADDING_NOTES = 2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHANGING_SETTINGS = 1

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.register_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –±–ª–æ–≥–∞
    keyboard = [
        [InlineKeyboardButton("üìö –ë–ª–æ–≥ –¥–æ–∫—Ç–æ—Ä–∞ –õ—ã—Å–µ–Ω–∫–æ", url="https://t.me/psihotips")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–Ø {BOT_INFO['name']} - –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤—Ä–∞—á–æ–º-–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º –Æ—Ä–∏–µ–º –õ—ã—Å–µ–Ω–∫–æ.\n\n"
        f"–ß—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º:\n"
        f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ, —Ç—Ä–µ–≤–æ–≥–µ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö\n"
        f"‚Ä¢ –£–¥–æ–±–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        f"‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π\n"
        f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ª–∏—á–Ω–æ –≤—Ä–∞—á—É-–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
        reply_markup=reply_markup
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("üìö –ë–ª–æ–≥ –¥–æ–∫—Ç–æ—Ä–∞ –õ—ã—Å–µ–Ω–∫–æ", url="https://t.me/psihotips")],
        [InlineKeyboardButton("üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url="https://t.me/psihotips/22")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –≤—Ä–∞—á–µ\n"
        "/test - –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n"
        "/mood - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        "/techniques - –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ –æ—Ç –≤—Ä–∞—á–∞-–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞\n"
        "/question - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ª–∏—á–Ω–æ –≤—Ä–∞—á—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–æ–∫—Ç–æ—Ä—É –õ—ã—Å–µ–Ω–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /question –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /about, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –≤—Ä–∞—á–µ
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("üìö –ë–ª–æ–≥ –¥–æ–∫—Ç–æ—Ä–∞ –õ—ã—Å–µ–Ω–∫–æ", url="https://t.me/psihotips")],
        [InlineKeyboardButton("üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url="https://t.me/psihotips/22")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚ÑπÔ∏è *–û –±–æ—Ç–µ –∏ –∞–≤—Ç–æ—Ä–µ*\n\n"
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {BOT_INFO['name']}\n"
        f"*–í–µ—Ä—Å–∏—è:* {BOT_INFO['version']}\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {BOT_INFO['description']}\n\n"
        f"*–ê–≤—Ç–æ—Ä:* {BOT_INFO['author']}\n"
        f"*–ë–ª–æ–≥:* {BOT_INFO['website']}\n\n"
        f"–Ø ‚Äî –Æ—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –õ—ã—Å–µ–Ω–∫–æ, –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç, –≤—Ä–∞—á-–ø—Å–∏—Ö–∏–∞—Ç—Ä –≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 10 –ª–µ—Ç. "
        f"–ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ.\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏, –Ω–æ –æ–Ω –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. "
        f"–ï—Å–ª–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel, –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    """
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—Ç–æ—Ä—É –õ—ã—Å–µ–Ω–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /question."
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ ---

@rate_limit("test", RATE_LIMIT["test"])
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /test, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–µ—Å—Ç–æ–≤
    keyboard = []
    for category_key, category_data in ALL_TEST_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(category_data["name"], callback_data=f"test_cat_{category_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìù *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã*\n\n"
        "–≠—Ç–∏ —Ç–µ—Å—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–Ω—ã –¥–æ–∫—Ç–æ—Ä–æ–º –õ—ã—Å–µ–Ω–∫–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. "
        "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–∞—á –ø—Ä–∏ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return CHOOSING_TEST

async def show_test_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_key = query.data.replace("test_cat_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_data = ALL_TEST_CATEGORIES.get(category_key)
    
    if not category_data:
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Å—Ç–∞–º–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for test_key in category_data["tests"]:
        test_data = ALL_TESTS.get(test_key)
        if test_data:
            keyboard.append([InlineKeyboardButton(test_data["name"], callback_data=f"test_{test_key}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="test_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù *{category_data['name']}*\n\n"
        f"{category_data['description']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return CHOOSING_TEST

async def select_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    if query.data == "test_back":
        return await test_command(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_key = query.data.replace("test_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_data = ALL_TESTS.get(test_key)
    
    if not test_data:
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_test"] = test_key
    context.user_data["current_question"] = 0
    context.user_data["answers"] = []
    
    # –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—à–∫–∞–ª–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –ø–æ–¥—à–∫–∞–ª–∞–º
    if test_data.get("calculation_type") == "subscales":
        context.user_data["subscale_answers"] = {}
        for subscale in test_data.get("subscales", []):
            context.user_data["subscale_answers"][subscale] = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="test_start")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="test_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    sensitive_warning = ""
    if test_data.get("sensitive", False):
        sensitive_warning = "\n‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
    
    await query.edit_message_text(
        f"üìù *{test_data['name']}*\n\n"
        f"{test_data['description']}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_data['questions'])}\n"
        f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {test_data['time']} –º–∏–Ω—É—Ç{sensitive_warning}\n\n"
        f"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return CONFIRMING_TEST

async def process_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ç–µ—Å—Ç
    if query.data == "test_cancel":
        await query.edit_message_text("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç
    if query.data == "test_start":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        return await show_test_question(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_num = int(query.data.replace("answer_", ""))
    
    test_key = context.user_data.get("selected_test")
    current_question = context.user_data.get("current_question", 0)
    test_data = ALL_TESTS.get(test_key)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if test_data.get("calculation_type") == "subscales":
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—à–∫–∞–ª–∞–º–∏
        question_data = test_data["questions"][current_question]
        subscale = question_data.get("subscale")
        
        if subscale:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–æ–¥—à–∫–∞–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–¥—à–∫–∞–ª—É
            context.user_data["subscale_answers"][subscale].append(answer_num)
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        context.user_data["answers"].append(answer_num)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        context.user_data["answers"].append(answer_num)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data["current_question"] += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return await show_test_question(update, context)

async def show_test_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    
    test_key = context.user_data.get("selected_test")
    current_question = context.user_data.get("current_question", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_data = ALL_TESTS.get(test_key)
    
    if not test_data:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞.")
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if current_question >= len(test_data["questions"]):
        return await calculate_test_result(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question_data = test_data["questions"][current_question]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for i, answer in enumerate(question_data["answers"]):
        keyboard.append([InlineKeyboardButton(answer, callback_data=f"answer_{i}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù *{test_data['name']}*\n\n"
        f"–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(test_data['questions'])}:\n\n"
        f"{question_data['text']}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return TAKING_TEST

async def calculate_test_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    test_key = context.user_data.get("selected_test")
    answers = context.user_data.get("answers", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_data = ALL_TESTS.get(test_key)
    
    if not test_data or not answers:
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return ConversationHandler.END
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if test_data.get("calculation_type") == "subscales":
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—à–∫–∞–ª–∞–º–∏
        subscale_scores = {}
        subscale_answers = context.user_data.get("subscale_answers", {})
        
        for subscale in test_data.get("subscales", []):
            subscale_score = 0
            subscale_questions = [q for q in test_data["questions"] if q.get("subscale") == subscale]
            
            for i, answer_idx in enumerate(subscale_answers.get(subscale, [])):
                question = subscale_questions[i]
                score = question["scores"][answer_idx]
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                if question.get("reverse", False):
                    # –î–ª—è —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ scores
                    pass
                
                subscale_score += score
            
            subscale_scores[subscale] = subscale_score
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—à–∫–∞–ª
        context.user_data["subscale_scores"] = subscale_scores
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥—à–∫–∞–ª—ã
        interpretations = {}
        for subscale, score in subscale_scores.items():
            subscale_interpretation = ""
            for result in test_data["interpretations"].get(subscale, []):
                if score >= result["min_score"] and score <= result["max_score"]:
                    subscale_interpretation = result["text"]
                    break
            interpretations[subscale] = subscale_interpretation
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        context.user_data["interpretations"] = interpretations
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.save_test_result(
            user_id=update.callback_query.from_user.id,
            test_type=test_data["name"],
            score=sum(subscale_scores.values()),  # –û–±—â–∏–π –±–∞–ª–ª –∫–∞–∫ —Å—É–º–º–∞ –ø–æ–¥—à–∫–∞–ª
            answers=answers,
            interpretation=str(interpretations)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        score = 0
        for i, answer_idx in enumerate(answers):
            question = test_data["questions"][i]
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if question.get("reverse", False):
                # –î–ª—è —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ —É—á—Ç–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ scores
                pass
            
            score += question["scores"][answer_idx]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        context.user_data["score"] = score
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        interpretation = ""
        for result in test_data["interpretations"]:
            if score >= result["min_score"] and score <= result["max_score"]:
                interpretation = result["text"]
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        context.user_data["interpretation"] = interpretation
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.save_test_result(
            user_id=update.callback_query.from_user.id,
            test_type=test_data["name"],
            score=score,
            answers=answers,
            interpretation=interpretation
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"result_{test_key}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        reply_markup=reply_markup
    )
    
    return SHOWING_RESULT

async def show_test_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    test_key = context.user_data.get("selected_test")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_data = ALL_TESTS.get(test_key)
    
    if not test_data:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return ConversationHandler.END
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if test_data.get("calculation_type") == "subscales":
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—à–∫–∞–ª–∞–º–∏
        subscale_scores = context.user_data.get("subscale_scores", {})
        interpretations = context.user_data.get("interpretations", {})
        
        result_text = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {test_data['name']}*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–¥—à–∫–∞–ª–µ
        for subscale in test_data.get("subscales", []):
            score = subscale_scores.get(subscale, 0)
            interpretation = interpretations.get(subscale, "")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—à–∫–∞–ª—ã
            subscale_name = subscale.replace("_", " ").capitalize()
            
            result_text += f"*{subscale_name}*: {score} –±–∞–ª–ª–æ–≤\n"
            result_text += f"{interpretation}\n\n"
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        score = context.user_data.get("score", 0)
        interpretation = context.user_data.get("interpretation", "")
        
        result_text = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {test_data['name']}*\n\n"
        result_text += f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{score}* –±–∞–ª–ª–æ–≤\n\n"
        result_text += f"{interpretation}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
    result_text += "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ–ø–∞—Å–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏–ª–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ—Å—Ç–∞–º –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data=f"test_{test_key}")],
        [InlineKeyboardButton("üìù –î—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã", callback_data="test_back")],
        [InlineKeyboardButton("üìö –ë–ª–æ–≥ –¥–æ–∫—Ç–æ—Ä–∞ –õ—ã—Å–µ–Ω–∫–æ", url="https://t.me/psihotips")],
        [InlineKeyboardButton("üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url="https://t.me/psihotips/22")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if len(result_text) > 4000:
        parts = split_text(result_text, 4000)
        for i, part in enumerate(parts):
            if i == len(parts) - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await query.edit_message_text(
                    part,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏
                await query.message.reply_text(
                    part,
                    parse_mode="Markdown"
                )
    else:
        await query.edit_message_text(
            result_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return CHOOSING_TEST
