#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import os
import asyncio
import json
from datetime import date, datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# Импортируем модуль статистики
import bot_statistics as stats

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Configuration for Bot and Admin ---
TOKEN = os.getenv("TOKEN")
ADMIN_USER_ID_STR = os.getenv("ADMIN_USER_ID")
ADMIN_USER_ID = int(ADMIN_USER_ID_STR) if ADMIN_USER_ID_STR else None

# --- State definitions for conversations ---
CHOOSING_TECHNIQUE, SHOWING_TECHNIQUE_DETAIL = range(2)
ASK_QUESTION_STATE = 0 # For user asking anonymous question
ADMIN_REPLY_STATE = 0 # For admin replying to anonymous question

# --- State definitions for tests ---
CHOOSING_TEST, CONFIRMING_TEST, TAKING_TEST, SHOWING_TEST_RESULT = range(4)

# --- Data for features (can be expanded or moved to separate files/DB later) ---
FINAL_DAILY_TIPS = [
    "Найдите 5 минут для глубокого дыхания. Это поможет успокоиться и сосредоточиться.",
    "Выпейте стакан воды. Гидратация важна для физического и ментального здоровья.",
    "Сделайте короткую прогулку на свежем воздухе. Это улучшит настроение и снизит стресс.",
    "Напишите три вещи, за которые вы благодарны сегодня. Это поможет сосредоточиться на позитиве.",
    "Сделайте перерыв от экранов на 20 минут. Это снизит нагрузку на глаза и мозг.",
    "Позвоните другу или близкому человеку. Социальные связи важны для психического здоровья.",
    "Сделайте простую растяжку. Это поможет расслабить тело и снять напряжение.",
    "Послушайте любимую музыку. Это может улучшить настроение и снизить тревогу.",
    "Попробуйте медитацию осознанности на 5 минут. Это поможет успокоить ум.",
    "Съешьте питательную пищу. Правильное питание влияет на ваше настроение и энергию.",
    "Запишите свои мысли и чувства. Это поможет обработать эмоции и снизить стресс.",
    "Сделайте что-то творческое: рисуйте, пишите, играйте на инструменте.",
    "Установите границы для работы и отдыха. Баланс важен для ментального здоровья.",
    "Практикуйте самосострадание. Будьте добры к себе, как были бы добры к другу.",
    "Сделайте что-то приятное для себя. Самозабота — это не эгоизм, а необходимость.",
    "Высыпайтесь. Хороший сон критически важен для психического здоровья.",
    "Ограничьте потребление новостей. Информационная перегрузка может вызвать тревогу.",
    "Практикуйте технику 5-4-3-2-1: назовите 5 вещей, которые видите, 4 — которые чувствуете, 3 — которые слышите, 2 — которые чувствуете запах, 1 — которую пробуете на вкус.",
    "Сделайте дыхательное упражнение 4-7-8: вдох на 4 счета, задержка на 7, выдох на 8.",
    "Проведите время на природе. Это снижает стресс и улучшает настроение.",
    "Ограничьте потребление кофеина. Избыток может усилить тревогу и нарушить сон.",
    "Практикуйте прогрессивную мышечную релаксацию. Напрягайте и расслабляйте группы мышц.",
    "Делайте перерывы между задачами. Это повышает продуктивность и снижает выгорание.",
    "Занимайтесь физической активностью. Даже 10 минут в день могут улучшить настроение.",
    "Практикуйте благодарность. Это меняет фокус с негатива на позитив.",
    "Ограничьте время в социальных сетях. Это может снизить тревогу и улучшить самооценку.",
    "Делайте глубокие вдохи, когда чувствуете стресс. Это активирует парасимпатическую нервную систему.",
    "Визуализируйте спокойное место. Это может снизить тревогу и стресс.",
    "Практикуйте осознанное питание. Обращайте внимание на вкус, текстуру и аромат пищи.",
    "Ставьте реалистичные цели. Это предотвращает разочарование и повышает мотивацию.",
    "Проводите время с домашними животными. Это снижает стресс и улучшает настроение.",
    "Практикуйте позитивный внутренний диалог. Говорите с собой так, как говорили бы с другом.",
    "Делайте что-то для других. Помощь другим улучшает и ваше самочувствие.",
    "Ограничьте многозадачность. Сосредоточение на одной задаче снижает стресс.",
    "Практикуйте технику «заземления»: сосредоточьтесь на физических ощущениях, чтобы вернуться в настоящий момент.",
    "Смейтесь. Смех снижает стресс и улучшает иммунную функцию.",
    "Практикуйте принятие. Не все можно контролировать, и это нормально.",
    "Ищите профессиональную помощь, если чувствуете, что не справляетесь. Это признак силы, а не слабости.",
    "Практикуйте технику «СТОП»: Стой, Тормози, Осознавай, Продолжай.",
    "Делайте перерывы от технологий. Цифровой детокс может улучшить сон и снизить тревогу.",
    "Практикуйте йогу. Она объединяет физическую активность и осознанность.",
    "Ведите дневник. Это помогает обрабатывать эмоции и отслеживать прогресс.",
    "Практикуйте технику «ДОЖДЬ»: Дай себе заметить, Отойди в сторону, Жди с добротой, Дай себе заботу.",
    "Создайте утренний ритуал. Это задает тон на весь день.",
    "Практикуйте технику «ПАУЗА»: Прерви действие, Активируй осознанность, Узнай свои чувства, Задай себе вопрос, Адаптируйся.",
    "Ограничьте контакт с токсичными людьми. Это защищает ваше психическое здоровье.",
    "Практикуйте технику «4 вопроса»: Это правда? Я абсолютно уверен, что это правда? Как я реагирую, когда верю в эту мысль? Кем бы я был без этой мысли?",
    "Создайте вечерний ритуал. Это помогает расслабиться и подготовиться ко сну.",
    "Практикуйте технику «RAIN»: Recognize (распознайте), Allow (позвольте), Investigate (исследуйте), Nurture (питайте).",
    "Делайте перерывы для отдыха глаз. Правило 20-20-20: каждые 20 минут смотрите на что-то в 20 футах (6 метрах) на 20 секунд.",
    "Практикуйте технику «5 почему». Задайте себе «почему» пять раз, чтобы добраться до корня проблемы.",
    "Создайте список дел на день. Это снижает тревогу и повышает продуктивность.",
    "Практикуйте технику «FAST»: Fair (справедливый), Apologize (извиняющийся), Stick to values (придерживающийся ценностей), Truthful (правдивый).",
    "Делайте перерывы для движения. Даже короткая прогулка может освежить ум.",
    "Практикуйте технику «ACCEPTS»: Activities (деятельность), Contributing (вклад), Comparisons (сравнения), Emotions (эмоции), Pushing away (отталкивание), Thoughts (мысли), Sensations (ощущения).",
    "Создайте список благодарности. Это меняет фокус с того, чего не хватает, на то, что есть.",
    "Практикуйте технику «IMPROVE»: Imagery (образы), Meaning (смысл), Prayer (молитва), Relaxation (расслабление), One thing at a time (одно дело за раз), Vacation (отпуск), Encouragement (поддержка).",
    "Делайте перерывы для гидратации. Даже легкое обезвоживание может влиять на настроение.",
    "Практикуйте технику «TIPP»: Temperature (температура), Intense exercise (интенсивные упражнения), Paced breathing (размеренное дыхание), Progressive muscle relaxation (прогрессивная мышечная релаксация).",
    "Создайте список достижений. Это повышает самооценку и мотивацию.",
    "Практикуйте технику «PLEASE»: Physical illness (физическая болезнь), Eating (питание), Altering drugs (изменяющие сознание вещества), Sleep (сон), Exercise (упражнения).",
    "Делайте перерывы для социального взаимодействия. Даже короткий разговор может улучшить настроение.",
    "Практикуйте технику «DEAR MAN»: Describe (описать), Express (выразить), Assert (утверждать), Reinforce (подкрепить), Mindful (осознанный), Appear confident (выглядеть уверенно), Negotiate (договариваться).",
    "Создайте список ценностей. Это помогает принимать решения, соответствующие вашим приоритетам.",
    "Практикуйте технику «GIVE»: Gentle (мягкий), Interested (заинтересованный), Validate (подтверждающий), Easy manner (легкая манера).",
    "Делайте перерывы для глубокого дыхания. Это активирует парасимпатическую нервную систему.",
    "Практикуйте технику «FAST»: Fair (справедливый), Apologies (извинения), Stick to values (придерживаться ценностей), Truthful (правдивый).",
    "Создайте список поддержки. Знайте, к кому обратиться в трудные времена.",
    "Практикуйте технику «ABC»: Accumulate positive emotions (накапливайте позитивные эмоции), Build mastery (развивайте мастерство), Cope ahead (справляйтесь заранее).",
    "Делайте перерывы для смеха. Смех снижает стресс и улучшает иммунную функцию.",
    "Практикуйте технику «STOP»: Stop (остановитесь), Take a step back (сделайте шаг назад), Observe (наблюдайте), Proceed mindfully (действуйте осознанно).",
    "Создайте список самозаботы. Регулярно делайте что-то для себя.",
    "Практикуйте технику «ACCEPTS»: Activities (деятельность), Contributing (вклад), Comparisons (сравнения), Emotions (эмоции), Pushing away (отталкивание), Thoughts (мысли), Sensations (ощущения).",
    "Делайте перерывы для природы. Даже короткое время на природе может снизить стресс.",
    "Практикуйте технику «IMPROVE»: Imagery (образы), Meaning (смысл), Prayer (молитва), Relaxation (расслабление), One thing at a time (одно дело за раз), Vacation (отпуск), Encouragement (поддержка).",
    "Создайте список целей. Это дает направление и смысл.",
    "Практикуйте технику «TIPP»: Temperature (температура), Intense exercise (интенсивные упражнения), Paced breathing (размеренное дыхание), Progressive muscle relaxation (прогрессивная мышечная релаксация).",
    "Делайте перерывы для творчества. Творческое выражение может быть терапевтическим.",
    "Практикуйте технику «PLEASE»: Physical illness (физическая болезнь), Eating (питание), Altering drugs (изменяющие сознание вещества), Sleep (сон), Exercise (упражнения).",
    "Создайте список границ. Знайте свои пределы и уважайте их.",
    "Практикуйте технику «DEAR MAN»: Describe (описать), Express (выразить), Assert (утверждать), Reinforce (подкрепить), Mindful (осознанный), Appear confident (выглядеть уверенно), Negotiate (договариваться).",
    "Делайте перерывы для медитации. Даже 5 минут могут снизить стресс.",
    "Практикуйте технику «GIVE»: Gentle (мягкий), Interested (заинтересованный), Validate (подтверждающий), Easy manner (легкая манера).",
    "Создайте список радостей. Регулярно делайте то, что приносит вам радость.",
    "Практикуйте технику «FAST»: Fair (справедливый), Apologies (извинения), Stick to values (придерживаться ценностей), Truthful (правдивый).",
    "Делайте перерывы для благодарности. Замечайте и цените хорошее в вашей жизни.",
    "Практикуйте технику «ABC»: Accumulate positive emotions (накапливайте позитивные эмоции), Build mastery (развивайте мастерство), Cope ahead (справляйтесь заранее).",
    "Создайте список ресурсов. Знайте, где найти помощь, когда она нужна.",
    "Практикуйте технику «STOP»: Stop (остановитесь), Take a step back (сделайте шаг назад), Observe (наблюдайте), Proceed mindfully (действуйте осознанно).",
    "Делайте перерывы для связи. Поддерживайте отношения с теми, кто вам дорог.",
    "Практикуйте технику «ACCEPTS»: Activities (деятельность), Contributing (вклад), Comparisons (сравнения), Emotions (эмоции), Pushing away (отталкивание), Thoughts (мысли), Sensations (ощущения)."
]

# --- Self-help techniques data ---
SELF_HELP_TECHNIQUES = {
    "Техники управления тревогой": {
        "description": "Методы, которые помогают справиться с тревожными состояниями и паническими атаками.",
        "techniques": [
            {
                "name": "Техника 5-4-3-2-1",
                "description": "Метод заземления, который помогает вернуться в настоящий момент при тревоге или панической атаке.\n\n"
                               "**Как выполнять:**\n"
                               "1. Назовите 5 вещей, которые вы видите\n"
                               "2. Назовите 4 вещи, которые вы можете потрогать\n"
                               "3. Назовите 3 вещи, которые вы слышите\n"
                               "4. Назовите 2 вещи, которые вы чувствуете запахом\n"
                               "5. Назовите 1 вещь, которую вы чувствуете на вкус\n\n"
                               "Эта техника помогает переключить внимание с тревожных мыслей на ощущения в теле и окружающую среду."
            },
            {
                "name": "Дыхательная техника 4-7-8",
                "description": "Техника дыхания, которая помогает успокоить нервную систему и снизить уровень тревоги.\n\n"
                               "**Как выполнять:**\n"
                               "1. Сядьте в удобное положение\n"
                               "2. Вдохните через нос на счет 4\n"
                               "3. Задержите дыхание на счет 7\n"
                               "4. Медленно выдохните через рот на счет 8\n"
                               "5. Повторите цикл 4-5 раз\n\n"
                               "Эта техника активирует парасимпатическую нервную систему, что помогает снизить частоту сердечных сокращений и уровень стресса."
            },
            {
                "name": "Прогрессивная мышечная релаксация",
                "description": "Техника, которая помогает снизить физическое напряжение, связанное с тревогой.\n\n"
                               "**Как выполнять:**\n"
                               "1. Сядьте или лягте в удобное положение\n"
                               "2. Начните с мышц ног: напрягите их на 5-10 секунд, затем расслабьте\n"
                               "3. Продвигайтесь вверх по телу, напрягая и расслабляя каждую группу мышц\n"
                               "4. Обратите внимание на разницу между напряжением и расслаблением\n\n"
                               "Эта техника помогает осознать и снизить физическое напряжение, которое часто сопровождает тревогу."
            },
            {
                "name": "Техника «СТОП»",
                "description": "Метод, который помогает прервать цикл тревожных мыслей и вернуться в настоящий момент.\n\n"
                               "**Как выполнять:**\n"
                               "1. **С**той: Прервите то, что делаете\n"
                               "2. **Т**ормози: Сделайте глубокий вдох\n"
                               "3. **О**сознавай: Обратите внимание на свои мысли, чувства и ощущения в теле\n"
                               "4. **П**родолжай: Вернитесь к тому, что делали, с большей осознанностью\n\n"
                               "Эта техника помогает прервать автоматические реакции и сделать осознанный выбор, как реагировать на ситуацию."
            },
            {
                "name": "Когнитивная реструктуризация",
                "description": "Техника, которая помогает идентифицировать и изменить негативные или нереалистичные мысли, вызывающие тревогу.\n\n"
                               "**Как выполнять:**\n"
                               "1. Идентифицируйте тревожную мысль\n"
                               "2. Оцените доказательства за и против этой мысли\n"
                               "3. Рассмотрите альтернативные, более реалистичные интерпретации ситуации\n"
                               "4. Замените тревожную мысль на более реалистичную\n\n"
                               "Эта техника помогает изменить негативные паттерны мышления, которые поддерживают тревогу."
            }
        ]
    },
    "Техники управления стрессом": {
        "description": "Методы, которые помогают справиться со стрессом и предотвратить выгорание.",
        "techniques": [
            {
                "name": "Техника «ДОЖДЬ»",
                "description": "Метод осознанности, который помогает справиться с трудными эмоциями и стрессом.\n\n"
                               "**Как выполнять:**\n"
                               "1. **Д**ай себе заметить: Осознайте, что вы испытываете стресс\n"
                               "2. **О**тойди в сторону: Не отождествляйтесь с эмоцией\n"
                               "3. **Ж**ди с добротой: Отнеситесь к себе с состраданием\n"
                               "4. **Д**ай себе заботу: Спросите себя, что вам нужно сейчас\n\n"
                               "Эта техника помогает развить самосострадание и осознанность в стрессовых ситуациях."
            },
            {
                "name": "Техника «ПАУЗА»",
                "description": "Метод, который помогает сделать паузу и осознанно отреагировать на стрессовую ситуацию.\n\n"
                               "**Как выполнять:**\n"
                               "1. **П**рерви действие: Остановитесь и сделайте паузу\n"
                               "2. **А**ктивируй осознанность: Обратите внимание на свое дыхание\n"
                               "3. **У**знай свои чувства: Определите, что вы чувствуете\n"
                               "4. **З**адай себе вопрос: Что мне нужно сейчас?\n"
                               "5. **А**даптируйся: Выберите осознанный ответ на ситуацию\n\n"
                               "Эта техника помогает прервать автоматические реакции на стресс и выбрать более адаптивный ответ."
            },
            {
                "name": "Техника «4 вопроса»",
                "description": "Метод исследования мыслей, который помогает снизить стресс, вызванный негативными мыслями.\n\n"
                               "**Как выполнять:**\n"
                               "1. Идентифицируйте стрессовую мысль\n"
                               "2. Задайте себе 4 вопроса:\n"
                               "   - Это правда?\n"
                               "   - Я абсолютно уверен, что это правда?\n"
                               "   - Как я реагирую, когда верю в эту мысль?\n"
                               "   - Кем бы я был без этой мысли?\n"
                               "3. Переверните мысль и найдите примеры, когда перевернутая мысль так же или более правдива\n\n"
                               "Эта техника помогает освободиться от стрессовых мыслей и увидеть ситуацию с разных сторон."
            },
            {
                "name": "Техника «RAIN»",
                "description": "Метод осознанности для работы с трудными эмоциями и стрессом.\n\n"
                               "**Как выполнять:**\n"
                               "1. **R**ecognize (Распознайте): Заметьте, что вы испытываете стресс\n"
                               "2. **A**llow (Позвольте): Позвольте эмоции быть, не пытаясь изменить ее\n"
                               "3. **I**nvestigate (Исследуйте): Исследуйте, где в теле вы чувствуете эмоцию\n"
                               "4. **N**urture (Питайте): Отнеситесь к себе с добротой и заботой\n\n"
                               "Эта техника помогает развить осознанность и самосострадание в стрессовых ситуациях."
            },
            {
                "name": "Техника «5 почему»",
                "description": "Метод, который помогает добраться до корня проблемы, вызывающей стресс.\n\n"
                               "**Как выполнять:**\n"
                               "1. Определите проблему, вызывающую стресс\n"
                               "2. Спросите себя: «Почему это вызывает у меня стресс?»\n"
                               "3. На каждый ответ задавайте вопрос «Почему?» еще 4 раза\n"
                               "4. На пятом «почему» вы обычно находите корень проблемы\n\n"
                               "Эта техника помогает понять глубинные причины стресса и найти более эффективные решения."
            }
        ]
    },
    "Техники для улучшения сна": {
        "description": "Методы, которые помогают улучшить качество сна и справиться с бессонницей.",
        "techniques": [
            {
                "name": "Прогрессивная мышечная релаксация для сна",
                "description": "Техника, которая помогает расслабить тело перед сном.\n\n"
                               "**Как выполнять:**\n"
                               "1. Лягте в удобное положение\n"
                               "2. Начните с мышц ног: напрягите их на 5-10 секунд, затем расслабьте\n"
                               "3. Продвигайтесь вверх по телу, напрягая и расслабляя каждую группу мышц\n"
                               "4. Обратите внимание на ощущение тяжести и тепла в расслабленных мышцах\n\n"
                               "Эта техника помогает снять физическое напряжение, которое может мешать засыпанию."
            },
            {
                "name": "Техника 4-7-8 для засыпания",
                "description": "Дыхательная техника, которая помогает успокоить ум и тело перед сном.\n\n"
                               "**Как выполнять:**\n"
                               "1. Лягте в удобное положение\n"
                               "2. Вдохните через нос на счет 4\n"
                               "3. Задержите дыхание на счет 7\n"
                               "4. Медленно выдохните через рот на счет 8\n"
                               "5. Повторите цикл 4-5 раз\n\n"
                               "Эта техника активирует парасимпатическую нервную систему, что помогает телу перейти в состояние отдыха."
            },
            {
                "name": "Сканирование тела",
                "description": "Техника осознанности, которая помогает расслабиться перед сном.\n\n"
                               "**Как выполнять:**\n"
                               "1. Лягте в удобное положение\n"
                               "2. Начните с пальцев ног и постепенно перемещайте внимание вверх по телу\n"
                               "3. Обратите внимание на ощущения в каждой части тела\n"
                               "4. Если заметите напряжение, представьте, как оно растворяется с каждым выдохом\n\n"
                               "Эта техника помогает перенаправить внимание с беспокойных мыслей на ощущения в теле, что способствует расслаблению."
            },
            {
                "name": "Визуализация для сна",
                "description": "Техника, которая использует воображение для создания расслабляющих образов перед сном.\n\n"
                               "**Как выполнять:**\n"
                               "1. Лягте в удобное положение и закройте глаза\n"
                               "2. Представьте спокойное, безопасное место (например, пляж, лес, горы)\n"
                               "3. Вовлеките все чувства: что вы видите, слышите, чувствуете, обоняете\n"
                               "4. Погрузитесь в это место, позволяя телу расслабиться\n\n"
                               "Эта техника помогает отвлечь ум от беспокойных мыслей и создать состояние расслабления, способствующее засыпанию."
            },
            {
                "name": "Техника «Пустой ум»",
                "description": "Метод, который помогает очистить ум от мыслей перед сном.\n\n"
                               "**Как выполнять:**\n"
                               "1. Лягте в удобное положение\n"
                               "2. Представьте свой ум как чистый лист бумаги или пустой экран\n"
                               "3. Когда приходят мысли, представляйте, как они исчезают или растворяются\n"
                               "4. Сосредоточьтесь на ощущении пустоты и спокойствия\n\n"
                               "Эта техника помогает снизить умственную активность, которая может мешать засыпанию."
            }
        ]
    },
    "Техники для повышения концентрации": {
        "description": "Методы, которые помогают улучшить фокус и концентрацию внимания.",
        "techniques": [
            {
                "name": "Техника Помодоро",
                "description": "Метод управления временем, который помогает поддерживать концентрацию.\n\n"
                               "**Как выполнять:**\n"
                               "1. Выберите задачу\n"
                               "2. Установите таймер на 25 минут\n"
                               "3. Работайте над задачей, пока не прозвенит таймер\n"
                               "4. Сделайте короткий перерыв (5 минут)\n"
                               "5. После 4 «помидоров» сделайте длинный перерыв (15-30 минут)\n\n"
                               "Эта техника помогает поддерживать фокус на задаче и предотвращает выгорание."
            },
            {
                "name": "Техника «Одно дело за раз»",
                "description": "Метод, который помогает сосредоточиться на одной задаче и избежать многозадачности.\n\n"
                               "**Как выполнять:**\n"
                               "1. Выберите одну задачу для работы\n"
                               "2. Уберите все отвлекающие факторы (телефон, уведомления)\n"
                               "3. Сосредоточьтесь только на этой задаче\n"
                               "4. Если ум начинает блуждать, мягко верните его к задаче\n\n"
                               "Эта техника помогает улучшить качество работы и снизить стресс, связанный с многозадачностью."
            },
            {
                "name": "Техника «Якорь внимания»",
                "description": "Метод, который использует «якорь» для возвращения блуждающего внимания.\n\n"
                               "**Как выполнять:**\n"
                               "1. Выберите «якорь» (например, дыхание, ощущение в руках)\n"
                               "2. Начните работу над задачей\n"
                               "3. Когда замечаете, что внимание ушло, вернитесь к «якорю»\n"
                               "4. После нескольких вдохов-выдохов вернитесь к задаче\n\n"
                               "Эта техника помогает тренировать внимание и быстрее возвращаться к задаче после отвлечения."
            },
            {
                "name": "Техника «Пять минут»",
                "description": "Метод, который помогает преодолеть прокрастинацию и начать работу.\n\n"
                               "**Как выполнять:**\n"
                               "1. Скажите себе, что вы будете работать над задачей всего 5 минут\n"
                               "2. Начните работу\n"
                               "3. По истечении 5 минут решите, хотите ли вы продолжить\n"
                               "4. Если да, продолжайте; если нет, остановитесь и вернитесь позже\n\n"
                               "Эта техника помогает преодолеть начальное сопротивление и часто приводит к более длительным периодам концентрации."
            },
            {
                "name": "Техника «Осознанное внимание»",
                "description": "Метод, который использует принципы осознанности для улучшения концентрации.\n\n"
                               "**Как выполнять:**\n"
                               "1. Перед началом работы сделайте несколько осознанных вдохов\n"
                               "2. Установите намерение быть полностью присутствующим в задаче\n"
                               "3. Во время работы замечайте, когда ум начинает блуждать\n"
                               "4. Без самокритики возвращайте внимание к задаче\n\n"
                               "Эта техника помогает развить метаосознанность (осознание своего внимания), что улучшает способность концентрироваться."
            }
        ]
    }
}

# --- Test data ---
TESTS = {
    "anxiety_test": {
        "name": "Тест на уровень тревожности",
        "description": "Этот тест поможет оценить ваш текущий уровень тревожности. Он состоит из 7 вопросов, на которые нужно ответить честно, выбрав наиболее подходящий вариант.",
        "questions": [
            {
                "text": "1. Как часто вы чувствуете беспокойство или нервозность без явной причины?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "2. Насколько сильно вы беспокоитесь о будущих событиях?",
                "options": ["Совсем не беспокоюсь", "Немного беспокоюсь", "Умеренно беспокоюсь", "Сильно беспокоюсь"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "3. Как часто у вас возникают физические симптомы тревоги (учащенное сердцебиение, потливость, дрожь)?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "4. Насколько сложно вам расслабиться?",
                "options": ["Не сложно", "Иногда сложно", "Часто сложно", "Почти всегда сложно"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "5. Как часто вы испытываете трудности с засыпанием из-за беспокойных мыслей?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "6. Насколько сильно тревога мешает вашей повседневной жизни?",
                "options": ["Совсем не мешает", "Немного мешает", "Умеренно мешает", "Сильно мешает"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "7. Как часто вы избегаете ситуаций или мест из-за тревоги?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            }
        ],
        "results": {
            "0-7": {
                "message": "Низкий уровень тревожности. Ваш уровень тревожности находится в пределах нормы. Продолжайте практиковать техники управления стрессом для поддержания психического благополучия.",
                "button_text": "Техники для профилактики тревоги",
                "button_url": "https://t.me/psihotips_channel/42"
            },
            "8-14": {
                "message": "Умеренный уровень тревожности. У вас наблюдаются признаки умеренной тревожности. Рекомендуется обратить внимание на техники управления тревогой и стрессом.",
                "button_text": "Техники управления тревогой",
                "button_url": "https://t.me/psihotips_channel/43"
            },
            "15-21": {
                "message": "Высокий уровень тревожности. У вас наблюдаются признаки высокой тревожности. Рекомендуется регулярно практиковать техники управления тревогой и рассмотреть возможность консультации со специалистом.",
                "button_text": "Найти специалиста",
                "button_url": "https://t.me/psihotips_channel/44"
            }
        }
    },
    "stress_test": {
        "name": "Тест на уровень стресса",
        "description": "Этот тест поможет оценить ваш текущий уровень стресса. Он состоит из 7 вопросов, на которые нужно ответить честно, выбрав наиболее подходящий вариант.",
        "questions": [
            {
                "text": "1. Как часто вы чувствуете себя перегруженным или не справляющимся с требованиями?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "2. Насколько часто вы испытываете раздражительность или вспыльчивость?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "3. Как часто вы испытываете физические симптомы стресса (головные боли, мышечное напряжение, проблемы с желудком)?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "4. Насколько сложно вам отключиться от работы или забот?",
                "options": ["Не сложно", "Иногда сложно", "Часто сложно", "Почти всегда сложно"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "5. Как часто вы чувствуете усталость, которая не проходит после отдыха?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "6. Насколько сильно стресс влияет на качество вашего сна?",
                "options": ["Совсем не влияет", "Немного влияет", "Умеренно влияет", "Сильно влияет"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "7. Как часто вы чувствуете, что не можете контролировать важные аспекты своей жизни?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            }
        ],
        "results": {
            "0-7": {
                "message": "Низкий уровень стресса. Ваш уровень стресса находится в пределах нормы. Продолжайте практиковать техники управления стрессом для поддержания психического благополучия.",
                "button_text": "Техники для профилактики стресса",
                "button_url": "https://t.me/psihotips_channel/45"
            },
            "8-14": {
                "message": "Умеренный уровень стресса. У вас наблюдаются признаки умеренного стресса. Рекомендуется обратить внимание на техники управления стрессом и самозаботу.",
                "button_text": "Техники управления стрессом",
                "button_url": "https://t.me/psihotips_channel/46"
            },
            "15-21": {
                "message": "Высокий уровень стресса. У вас наблюдаются признаки высокого стресса. Рекомендуется регулярно практиковать техники управления стрессом и рассмотреть возможность консультации со специалистом.",
                "button_text": "Найти специалиста",
                "button_url": "https://t.me/psihotips_channel/47"
            }
        }
    },
    "burnout_test": {
        "name": "Тест на выгорание",
        "description": "Этот тест поможет оценить ваш риск профессионального выгорания. Он состоит из 7 вопросов, на которые нужно ответить честно, выбрав наиболее подходящий вариант.",
        "questions": [
            {
                "text": "1. Как часто вы чувствуете эмоциональное истощение после рабочего дня?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "2. Насколько сильно вы чувствуете отстраненность или цинизм по отношению к работе?",
                "options": ["Совсем не чувствую", "Немного чувствую", "Умеренно чувствую", "Сильно чувствую"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "3. Как часто вы чувствуете, что ваша работа не имеет смысла или значения?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "4. Насколько сложно вам сосредоточиться на рабочих задачах?",
                "options": ["Не сложно", "Иногда сложно", "Часто сложно", "Почти всегда сложно"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "5. Как часто вы чувствуете, что ваша эффективность или продуктивность снижается?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "6. Насколько сильно работа влияет на ваше физическое здоровье (бессонница, головные боли, проблемы с желудком)?",
                "options": ["Совсем не влияет", "Немного влияет", "Умеренно влияет", "Сильно влияет"],
                "values": [0, 1, 2, 3]
            },
            {
                "text": "7. Как часто вы чувствуете, что у вас нет энергии или мотивации для занятий, которые раньше приносили удовольствие?",
                "options": ["Никогда или редко", "Иногда", "Часто", "Почти всегда"],
                "values": [0, 1, 2, 3]
            }
        ],
        "results": {
            "0-7": {
                "message": "Низкий риск выгорания. Ваш риск выгорания находится на низком уровне. Продолжайте практиковать техники самозаботы и управления стрессом для поддержания психического благополучия.",
                "button_text": "Техники для профилактики выгорания",
                "button_url": "https://t.me/psihotips_channel/48"
            },
            "8-14": {
                "message": "Умеренный риск выгорания. У вас наблюдаются признаки умеренного риска выгорания. Рекомендуется обратить внимание на баланс работы и отдыха, а также практиковать техники самозаботы.",
                "button_text": "Техники для борьбы с выгоранием",
                "button_url": "https://t.me/psihotips_channel/49"
            },
            "15-21": {
                "message": "Высокий риск выгорания. У вас наблюдаются признаки высокого риска выгорания. Рекомендуется серьезно пересмотреть баланс работы и отдыха, практиковать техники самозаботы и рассмотреть возможность консультации со специалистом.",
                "button_text": "Найти специалиста",
                "button_url": "https://t.me/psihotips_channel/50"
            }
        }
    }
}

# --- Keyboard layouts ---
def get_main_keyboard():
    """Возвращает основную клавиатуру с главными функциями бота."""
    keyboard = [
        [KeyboardButton("Получить совет дня ✨"), KeyboardButton("Техники самопомощи 🧘")],
        [KeyboardButton("Пройти тест 📝"), KeyboardButton("Записать настроение/привычку 😊")],
        [KeyboardButton("Задать анонимный вопрос ❓")],
        [KeyboardButton("Помощь 🆘"), KeyboardButton("О боте ℹ️")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_self_help_categories_keyboard():
    """Возвращает клавиатуру с категориями техник самопомощи."""
    categories = list(SELF_HELP_TECHNIQUES.keys())
    keyboard = [[KeyboardButton(category)] for category in categories]
    keyboard.append([KeyboardButton("Вернуться в главное меню ↩️")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_techniques_keyboard(category):
    """Возвращает клавиатуру с техниками из выбранной категории."""
    techniques = [technique["name"] for technique in SELF_HELP_TECHNIQUES[category]["techniques"]]
    keyboard = [[KeyboardButton(technique)] for technique in techniques]
    keyboard.append([KeyboardButton("Назад к категориям ↩️")])
    keyboard.append([KeyboardButton("Вернуться в главное меню ↩️")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_test_keyboard():
    """Возвращает клавиатуру с доступными тестами."""
    tests = [test_data["name"] for test_id, test_data in TESTS.items()]
    keyboard = [[KeyboardButton(test)] for test in tests]
    keyboard.append([KeyboardButton("Вернуться в главное меню ↩️")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_yes_no_keyboard():
    """Возвращает клавиатуру с вариантами Да/Нет."""
    keyboard = [
        [KeyboardButton("Да"), KeyboardButton("Нет")],
        [KeyboardButton("Вернуться в главное меню ↩️")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_test_options_keyboard(options):
    """Возвращает клавиатуру с вариантами ответов на вопрос теста."""
    keyboard = [[KeyboardButton(option)] for option in options]
    keyboard.append([KeyboardButton("Отменить тест ❌")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- Helper functions ---
def get_test_id_by_name(test_name):
    """Возвращает ID теста по его названию."""
    for test_id, test_data in TESTS.items():
        if test_data["name"] == test_name:
            return test_id
    return None

def calculate_test_result(test_id, answers):
    """Рассчитывает результат теста на основе ответов."""
    total_score = sum(answers)
    
    # Определяем диапазон результата
    if total_score <= 7:
        return "0-7"
    elif total_score <= 14:
        return "8-14"
    else:
        return "15-21"

def get_result_message_and_button(test_id, result):
    """Возвращает сообщение и кнопку для результата теста."""
    test_data = TESTS[test_id]
    result_data = test_data["results"][result]
    
    return result_data["message"], result_data["button_text"], result_data["button_url"]

# --- Command handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обрабатывает команду /start и кнопку возврата в главное меню."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name, is_command=True)
    await stats.increment_command_usage("start")
    
    await update.message.reply_text(
        f"Привет, {user.first_name}! 👋\n\n"
        "Я бот-помощник по психологическому благополучию. Я могу предложить техники самопомощи, "
        "дать совет дня, помочь пройти психологические тесты и многое другое.\n\n"
        "Выберите интересующую вас функцию в меню ниже:",
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обрабатывает команду /help и кнопку Помощь."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name, is_command=True)
    await stats.increment_command_usage("help")
    
    await update.message.reply_text(
        "Вот что я умею:\n\n"
        "🔹 *Получить совет дня* - получите случайный совет для улучшения психологического благополучия\n"
        "🔹 *Техники самопомощи* - изучите различные техники для управления тревогой, стрессом и другими состояниями\n"
        "🔹 *Пройти тест* - пройдите психологические тесты для оценки вашего состояния\n"
        "🔹 *Записать настроение/привычку* - ведите дневник настроения и отслеживайте привычки\n"
        "🔹 *Задать анонимный вопрос* - задайте вопрос администратору канала анонимно\n\n"
        "Используйте кнопки меню для навигации. Если у вас возникли проблемы, напишите /start, чтобы начать заново.",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обрабатывает команду /about и кнопку О боте."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name, is_command=True)
    await stats.increment_command_usage("about")
    
    await update.message.reply_text(
        "🤖 *О боте*\n\n"
        "Я бот-помощник по психологическому благополучию, созданный для поддержки вашего ментального здоровья.\n\n"
        "Мои функции включают:\n"
        "• Ежедневные советы для улучшения психологического благополучия\n"
        "• Техники самопомощи для различных состояний\n"
        "• Психологические тесты для самооценки\n"
        "• Дневник настроения и привычек\n"
        "• Возможность задать анонимный вопрос\n\n"
        "Я не заменяю профессиональную психологическую помощь. Если вы испытываете серьезные проблемы с психическим здоровьем, "
        "пожалуйста, обратитесь к квалифицированному специалисту.\n\n"
        "Версия: 6.0",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

# --- Feature handlers ---
async def handle_daily_tip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обрабатывает запрос на получение совета дня."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    await stats.record_feature_interaction(user.id, "daily_tip", "random_tip")
    
    # Получаем случайный совет
    tip = random.choice(FINAL_DAILY_TIPS)
    
    await update.message.reply_text(
        f"✨ *Совет дня:*\n\n{tip}",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def handle_self_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает запрос на получение техник самопомощи."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    await stats.record_feature_interaction(user.id, "self_help", "category_selection")
    
    await update.message.reply_text(
        "Выберите категорию техник самопомощи:",
        reply_markup=get_self_help_categories_keyboard()
    )
    return CHOOSING_TECHNIQUE

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает выбор категории техник самопомощи."""
    user_choice = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    
    if user_choice == "Вернуться в главное меню ↩️":
        await update.message.reply_text(
            "Вы вернулись в главное меню.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    if user_choice in SELF_HELP_TECHNIQUES:
        # Записываем взаимодействие с категорией
        await stats.record_feature_interaction(user.id, "self_help", f"category_{user_choice}")
        
        context.user_data["current_category"] = user_choice
        category_description = SELF_HELP_TECHNIQUES[user_choice]["description"]
        
        await update.message.reply_text(
            f"*{user_choice}*\n\n{category_description}\n\nВыберите технику для подробной информации:",
            parse_mode='Markdown',
            reply_markup=get_techniques_keyboard(user_choice)
        )
        return SHOWING_TECHNIQUE_DETAIL
    
    await update.message.reply_text(
        "Извините, я не нашел такую категорию. Пожалуйста, выберите из предложенных вариантов.",
        reply_markup=get_self_help_categories_keyboard()
    )
    return CHOOSING_TECHNIQUE

async def handle_technique_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает выбор конкретной техники самопомощи."""
    user_choice = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    
    if user_choice == "Вернуться в главное меню ↩️":
        await update.message.reply_text(
            "Вы вернулись в главное меню.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    if user_choice == "Назад к категориям ↩️":
        await update.message.reply_text(
            "Выберите категорию техник самопомощи:",
            reply_markup=get_self_help_categories_keyboard()
        )
        return CHOOSING_TECHNIQUE
    
    current_category = context.user_data.get("current_category")
    if not current_category:
        await update.message.reply_text(
            "Произошла ошибка. Пожалуйста, начните заново.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    for technique in SELF_HELP_TECHNIQUES[current_category]["techniques"]:
        if technique["name"] == user_choice:
            # Записываем взаимодействие с техникой
            await stats.record_feature_interaction(
                user.id, 
                "self_help_technique", 
                f"{current_category}_{technique['name']}"
            )
            
            await update.message.reply_text(
                f"*{technique['name']}*\n\n{technique['description']}",
                parse_mode='Markdown',
                reply_markup=get_techniques_keyboard(current_category)
            )
            return SHOWING_TECHNIQUE_DETAIL
    
    await update.message.reply_text(
        "Извините, я не нашел такую технику. Пожалуйста, выберите из предложенных вариантов.",
        reply_markup=get_techniques_keyboard(current_category)
    )
    return SHOWING_TECHNIQUE_DETAIL

# --- Anonymous Question Handlers ---
async def handle_ask_question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает запрос на отправку анонимного вопроса."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    await stats.record_feature_interaction(user.id, "anonymous_question", "start")
    
    await update.message.reply_text(
        "Вы можете задать анонимный вопрос администратору канала. Ваш вопрос будет передан анонимно.\n\n"
        "Пожалуйста, напишите ваш вопрос или нажмите 'Вернуться в главное меню ↩️', чтобы отменить.",
        reply_markup=ReplyKeyboardMarkup([["Вернуться в главное меню ↩️"]], resize_keyboard=True)
    )
    return ASK_QUESTION_STATE

async def handle_question_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает отправку анонимного вопроса."""
    user_question = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    
    if user_question == "Вернуться в главное меню ↩️":
        await update.message.reply_text(
            "Вы вернулись в главное меню.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # Записываем взаимодействие с отправкой вопроса
    await stats.record_feature_interaction(
        user.id, 
        "anonymous_question", 
        "question_sent", 
        {"question_length": len(user_question)}
    )
    
    # Сохраняем ID пользователя для возможности ответа
    user_id = update.effective_user.id
    
    # Отправляем вопрос администратору
    if ADMIN_USER_ID:
        # Создаем inline кнопку для ответа
        keyboard = [[InlineKeyboardButton("Ответить пользователю", callback_data=f"reply_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"Новый анонимный вопрос:\n\n{user_question}",
            reply_markup=reply_markup
        )
        
        await update.message.reply_text(
            "Ваш вопрос успешно отправлен администратору. Ответ придет в этот чат.",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "Извините, в данный момент отправка вопросов недоступна. Пожалуйста, попробуйте позже.",
            reply_markup=get_main_keyboard()
        )
    
    return ConversationHandler.END

async def handle_admin_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает нажатие кнопки ответа на анонимный вопрос."""
    query = update.callback_query
    await query.answer()
    
    # Извлекаем ID пользователя из callback_data
    data = query.data
    if data.startswith("reply_"):
        user_id = int(data.split("_")[1])
        
        # Сохраняем ID пользователя в контексте для последующего ответа
        context.user_data["reply_to_user_id"] = user_id
        
        await query.message.reply_text(
            f"Введите ваш ответ для пользователя. Сообщение будет отправлено анонимно.",
            reply_markup=ReplyKeyboardMarkup([["Отменить ответ"]], resize_keyboard=True)
        )
        return ADMIN_REPLY_STATE
    else:
        logger.warning(f"Unexpected callback_data in handle_admin_reply_button: {data}")
        # Optionally inform the admin/user, but the primary goal is ending the conversation.
        # await query.message.reply_text(
        #     "Произошла ошибка при обработке вашего запроса. Попробуйте снова.",
        #     reply_markup=get_main_keyboard() 
        # )
        return ConversationHandler.END

async def handle_admin_reply_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает отправку ответа на анонимный вопрос."""
    admin_reply = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя (администратора)
    await stats.process_message(user.id, user.username, user.first_name)
    
    if admin_reply == "Отменить ответ":
        await update.message.reply_text(
            "Ответ отменен.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    user_id = context.user_data.get("reply_to_user_id")
    if user_id:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"Ответ на ваш анонимный вопрос:\n\n{admin_reply}"
            )
            
            # Записываем взаимодействие с ответом на вопрос
            await stats.record_feature_interaction(
                user.id, 
                "anonymous_question", 
                "admin_reply_sent", 
                {"reply_length": len(admin_reply), "to_user_id": user_id}
            )
            
            await update.message.reply_text(
                "Ваш ответ успешно отправлен пользователю.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            await update.message.reply_text(
                f"Не удалось отправить ответ пользователю. Ошибка: {str(e)}",
                reply_markup=get_main_keyboard()
            )
    else:
        await update.message.reply_text(
            "Произошла ошибка. Не удалось определить получателя.",
            reply_markup=get_main_keyboard()
        )
    
    # Очищаем данные
    context.user_data.pop("reply_to_user_id", None)
    
    return ConversationHandler.END

# --- Test Handlers ---
async def handle_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает запрос на прохождение теста."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    await stats.record_feature_interaction(user.id, "quiz", "test_selection")
    
    await update.message.reply_text(
        "Выберите тест, который хотите пройти:",
        reply_markup=get_test_keyboard()
    )
    return CHOOSING_TEST

async def handle_test_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает выбор теста."""
    user_choice = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    
    if user_choice == "Вернуться в главное меню ↩️":
        await update.message.reply_text(
            "Вы вернулись в главное меню.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    test_id = get_test_id_by_name(user_choice)
    if not test_id:
        await update.message.reply_text(
            "Извините, я не нашел такой тест. Пожалуйста, выберите из предложенных вариантов.",
            reply_markup=get_test_keyboard()
        )
        return CHOOSING_TEST
    
    # Записываем взаимодействие с выбором теста
    await stats.record_feature_interaction(user.id, "quiz", f"selected_{test_id}")
    
    # Сохраняем выбранный тест
    context.user_data["current_test"] = test_id
    
    # Показываем описание теста и запрашиваем подтверждение
    test_data = TESTS[test_id]
    await update.message.reply_text(
        f"{test_data['description']}\n\nХотите начать тест?",
        reply_markup=get_yes_no_keyboard(),
        parse_mode='Markdown'
    )
    return CONFIRMING_TEST

async def handle_test_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает подтверждение начала теста."""
    user_choice = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    
    if user_choice == "Вернуться в главное меню ↩️":
        await update.message.reply_text(
            "Вы вернулись в главное меню.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    if user_choice != "Да":
        await update.message.reply_text(
            "Вы можете выбрать другой тест или вернуться в главное меню.",
            reply_markup=get_test_keyboard()
        )
        return CHOOSING_TEST
    
    # Инициализируем данные для теста
    test_id = context.user_data["current_test"]
    context.user_data["test_answers"] = []
    context.user_data["current_question"] = 0
    
    # Записываем взаимодействие с началом теста
    await stats.record_feature_interaction(user.id, "quiz", f"started_{test_id}")
    
    # Задаем первый вопрос
    return await ask_test_question(update, context)

async def ask_test_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Задает вопрос теста."""
    test_id = context.user_data["current_test"]
    question_index = context.user_data["current_question"]
    test_data = TESTS[test_id]
    
    if question_index >= len(test_data["questions"]):
        # Все вопросы заданы, показываем результат
        return await show_test_result(update, context)
    
    question = test_data["questions"][question_index]
    options = question["options"]
    
    await update.message.reply_text(
        question["text"],
        reply_markup=get_test_options_keyboard(options)
    )
    return TAKING_TEST

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Обрабатывает ответ на вопрос теста."""
    user_answer = update.message.text
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    
    if user_answer == "Отменить тест ❌":
        # Записываем взаимодействие с отменой теста
        test_id = context.user_data["current_test"]
        await stats.record_feature_interaction(
            user.id, 
            "quiz", 
            f"cancelled_{test_id}", 
            {"question_index": context.user_data["current_question"]}
        )
        
        await update.message.reply_text(
            "Тест отменен. Вы можете выбрать другой тест или вернуться в главное меню.",
            reply_markup=get_test_keyboard()
        )
        return CHOOSING_TEST
    
    test_id = context.user_data["current_test"]
    question_index = context.user_data["current_question"]
    test_data = TESTS[test_id]
    question = test_data["questions"][question_index]
    
    try:
        option_index = question["options"].index(user_answer)
        answer_value = question["values"][option_index]
        context.user_data["test_answers"].append(answer_value)
        
        # Записываем взаимодействие с ответом на вопрос
        await stats.record_feature_interaction(
            user.id, 
            "quiz", 
            f"answered_q{question_index}_{test_id}", 
            {"answer_value": answer_value}
        )
    except ValueError:
        await update.message.reply_text(
            "Пожалуйста, выберите один из предложенных вариантов ответа.",
            reply_markup=get_test_options_keyboard(question["options"])
        )
        return TAKING_TEST
    
    # Переходим к следующему вопросу
    context.user_data["current_question"] += 1
    return await ask_test_question(update, context)

async def show_test_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Показывает результат теста."""
    test_id = context.user_data["current_test"]
    answers = context.user_data["test_answers"]
    user_id = update.effective_user.id
    user = update.effective_user
    
    # Рассчитываем результат
    result = calculate_test_result(test_id, answers)
    
    # Записываем взаимодействие с завершением теста
    await stats.record_feature_interaction(
        user.id, 
        "quiz", 
        f"completed_{test_id}", 
        {"result": result, "score": sum(answers)}
    )
    
    # Сохраняем результат в историю пользователя
    current_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await stats.save_test_result(user_id, test_id, current_time_str, result, sum(answers))
    
    # Получаем сообщение и кнопку для результата
    message, button_text, button_url = get_result_message_and_button(test_id, result)
    
    # Создаем inline кнопку для действия
    keyboard = [[InlineKeyboardButton(button_text, url=button_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{message}\n\nСпасибо за прохождение теста!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # Возвращаемся в главное меню
    await update.message.reply_text(
        "Вы можете пройти другой тест или вернуться в главное меню.",
        reply_markup=get_test_keyboard()
    )
    
    # Очищаем данные теста
    context.user_data.pop("current_test", None)
    context.user_data.pop("test_answers", None)
    context.user_data.pop("current_question", None)
    
    return CHOOSING_TEST

# --- Mood/Habit Tracking ---
async def handle_mood_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обрабатывает запрос на запись настроения/привычки."""
    user = update.effective_user
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name)
    await stats.record_feature_interaction(user.id, "mood_entry", "placeholder_accessed")
    
    await update.message.reply_text(
        "Функция записи настроения и привычек находится в разработке и будет доступна в ближайшее время!",
        reply_markup=get_main_keyboard()
    )
    return None

# --- Statistics Command ---
async def handle_botstats_adv_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обрабатывает команду /botstats_adv для получения расширенной статистики."""
    user = update.effective_user
    
    # Проверяем, является ли пользователь администратором
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text(
            "Извините, эта команда доступна только администратору бота.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Обновляем статистику пользователя
    await stats.process_message(user.id, user.username, user.first_name, is_command=True)
    await stats.increment_command_usage("botstats_adv")
    
    # Получаем расширенную статистику
    stats_data = await stats.get_advanced_stats()
    
    # Форматируем статистику в HTML
    stats_html = stats.format_stats_html(stats_data)
    
    await update.message.reply_text(
        stats_html,
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# --- Main Function ---
async def main() -> None:
    # Инициализируем базу данных статистики
    await stats.initialize_database()
    
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # Add conversation handler for tests
    test_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^Пройти тест 📝$"), handle_test_command)],
        states={
            CHOOSING_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_selection)],
            CONFIRMING_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_confirmation)],
            TAKING_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_answer)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )
    
    # Add conversation handler for self-help techniques
    self_help_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^Техники самопомощи 🧘$"), handle_self_help_command)],
        states={
            CHOOSING_TECHNIQUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_selection)],
            SHOWING_TECHNIQUE_DETAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_technique_selection)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )
    
    # Add conversation handler for anonymous questions
    question_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^Задать анонимный вопрос ❓$"), handle_ask_question_command)],
        states={
            ASK_QUESTION_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question_submission)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )
    
    # Add conversation handler for admin replies
    admin_reply_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_admin_reply_button, pattern=r"^reply_\d+$")],
        states={
            ADMIN_REPLY_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_reply_submission)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )
    
    application.add_handler(test_conv_handler)
    application.add_handler(self_help_conv_handler)
    application.add_handler(question_conv_handler)
    application.add_handler(admin_reply_conv_handler)

    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("botstats_adv", handle_botstats_adv_command))
    
    # Add message handler for daily tip
    application.add_handler(MessageHandler(
        filters.Regex(r"^Получить совет дня ✨$"), handle_daily_tip
    ))
    
    # Add message handler for mood tracking
    application.add_handler(MessageHandler(
        filters.Regex(r"^Записать настроение/привычку 😊$"), handle_mood_tracking
    ))
    
    # Add message handler for returning to main menu
    application.add_handler(MessageHandler(
        filters.Regex(r"^Вернуться в главное меню ↩️$"), start
    ))
    
    # Add message handler for help button
    application.add_handler(MessageHandler(
        filters.Regex(r"^Помощь 🆘$"), help_command
    ))
    
    # Add message handler for about button
    application.add_handler(MessageHandler(
        filters.Regex(r"^О боте ℹ️$"), about_command
    ))
    
    # Add general message handler for statistics
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        async lambda update, context: await stats.process_message(
            update.effective_user.id,
            update.effective_user.username,
            update.effective_user.first_name
        )
    ))

    # Run the bot
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
