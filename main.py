#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
"""

import os
import logging
import asyncio
from datetime import datetime

from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext import ConversationHandler, filters, ContextTypes

from config import BOT_TOKEN, BOT_INFO, ADMIN_USER_ID
from database import Database
from handlers import (
    start_command, help_command, about_command, daily_tip_command,
    ask_question_command, save_question, cancel_question,
    admin_reply_command, save_admin_reply, cancel_admin_reply, list_questions_command,
    tests_command, test_callback, start_test, process_test_answer,
    techniques_command, show_techniques_category, show_technique_detail, back_to_techniques,
    mood_tracking_command, process_mood_choice, ask_for_mood_notes, save_mood_with_notes,
    save_mood_without_notes, cancel_mood_tracking, show_mood_history_command,
    settings_command, process_settings_choice, save_setting_value, cancel_settings,
    handle_text_message, error_handler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def setup_commands(application: Application) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
    """
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("tip", "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è"),
        BotCommand("tests", "–ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç"),
        BotCommand("techniques", "–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏"),
        BotCommand("mood", "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"),
        BotCommand("ask", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É"),
        BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand("about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    ]
    
    await application.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def send_startup_notification(application: Application) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    """
    try:
        await application.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"ü§ñ –ë–æ—Ç {BOT_INFO['name']} –∑–∞–ø—É—â–µ–Ω!\n"
                 f"–í–µ—Ä—Å–∏—è: {BOT_INFO['version']}\n"
                 f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {ADMIN_USER_ID})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def schedule_daily_tasks(application: Application) -> None:
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞
    """
    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()
        
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å 9:00, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        if now.hour == 9 and now.minute == 0:
            await send_daily_tips(application)
        
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–ª–Ω–æ—á—å, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if now.hour == 0 and now.minute == 0:
            db.backup_database()
        
        # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)

async def send_daily_tips(application: Application) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∏–ª–∏ —ç—Ç—É –æ–ø—Ü–∏—é
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        users = db.get_users_with_daily_tips()
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤")
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤
        from data.tips import DAILY_TIPS
        import random
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        for user in users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tips_history = db.get_user_tips_history(user["user_id"])
                recent_tips = [tip["tip_text"] for tip in tips_history]
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                available_tips = [tip for tip in DAILY_TIPS if tip not in recent_tips]
                
                # –ï—Å–ª–∏ –≤—Å–µ —Å–æ–≤–µ—Ç—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if not available_tips:
                    available_tips = DAILY_TIPS
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
                tip = random.choice(available_tips)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                db.save_daily_tip(user["user_id"], tip)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await application.bot.send_message(
                    chat_id=user["user_id"],
                    text=f"üß† *–°–æ–≤–µ—Ç –¥–Ω—è:*\n\n{tip}\n\n"
                         f"–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tip.",
                    parse_mode="Markdown"
                )
                
                logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤: {e}")

def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ config.py")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("tip", daily_tip_command))
    application.add_handler(CommandHandler("list_questions", list_questions_command))
    application.add_handler(CommandHandler("mood_history", show_mood_history_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    ask_question_handler = ConversationHandler(
        entry_points=[CommandHandler("ask", ask_question_command)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_question)]
        },
        fallbacks=[CommandHandler("cancel", cancel_question)]
    )
    application.add_handler(ask_question_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_reply_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^/reply_\d+$"), admin_reply_command)],
        states={
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_admin_reply)]
        },
        fallbacks=[CommandHandler("cancel", cancel_admin_reply)]
    )
    application.add_handler(admin_reply_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
    tests_handler = ConversationHandler(
        entry_points=[CommandHandler("tests", tests_command)],
        states={
            1: [CallbackQueryHandler(test_callback, pattern=r"^test_")],
            2: [CallbackQueryHandler(start_test, pattern=r"^confirm_")],
            3: [CallbackQueryHandler(process_test_answer, pattern=r"^answer_")],
            4: [CallbackQueryHandler(test_callback, pattern=r"^test_")]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )
    application.add_handler(tests_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫ —Å–∞–º–æ–ø–æ–º–æ—â–∏
    techniques_handler = ConversationHandler(
        entry_points=[CommandHandler("techniques", techniques_command)],
        states={
            1: [CallbackQueryHandler(show_techniques_category, pattern=r"^cat_")],
            2: [
                CallbackQueryHandler(show_technique_detail, pattern=r"^tech_"),
                CallbackQueryHandler(back_to_techniques, pattern=r"^detail_")
            ]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )
    application.add_handler(techniques_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    mood_handler = ConversationHandler(
        entry_points=[CommandHandler("mood", mood_tracking_command)],
        states={
            1: [CallbackQueryHandler(process_mood_choice, pattern=r"^mood_")],
            2: [
                CallbackQueryHandler(ask_for_mood_notes, pattern=r"^notes_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_mood_with_notes)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_mood_tracking)]
    )
    application.add_handler(mood_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_handler = ConversationHandler(
        entry_points=[CommandHandler("settings", settings_command)],
        states={
            1: [
                CallbackQueryHandler(process_settings_choice, pattern=r"^settings_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_setting_value)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_settings)]
    )
    application.add_handler(settings_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    application.post_init = setup_commands
    application.post_shutdown = lambda app: logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    loop = asyncio.get_event_loop()
    loop.create_task(send_startup_notification(application))
    loop.create_task(schedule_daily_tasks(application))

if __name__ == "__main__":
    main()
