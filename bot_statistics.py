#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os
import json
import asyncio
from datetime import datetime

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bot_statistics.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def initialize_database():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        first_seen TIMESTAMP,
        last_seen TIMESTAMP,
        message_count INTEGER DEFAULT 0
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS command_usage (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        command TEXT,
        count INTEGER DEFAULT 0
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feature_interactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        feature TEXT,
        action TEXT,
        timestamp TIMESTAMP,
        metadata TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_message(user_id, username, first_name, is_command=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "UPDATE users SET username = ?, first_name = ?, last_seen = ?, message_count = message_count + 1 WHERE user_id = ?",
            (username, first_name, now, user_id)
        )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, first_seen, last_seen, message_count) VALUES (?, ?, ?, ?, ?, 1)",
            (user_id, username, first_name, now, now)
        )
    
    conn.commit()
    conn.close()

# –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
async def increment_command_usage(command):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    cursor.execute("SELECT * FROM command_usage WHERE command = ?", (command,))
    cmd = cursor.fetchone()
    
    if cmd:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        cursor.execute(
            "UPDATE command_usage SET count = count + 1 WHERE command = ?",
            (command,)
        )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute(
            "INSERT INTO command_usage (command, count) VALUES (?, 1)",
            (command,)
        )
    
    conn.commit()
    conn.close()

# –ó–∞–ø–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
async def record_feature_interaction(user_id, feature, action, metadata=None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    metadata_json = json.dumps(metadata) if metadata else None
    
    cursor.execute(
        "INSERT INTO feature_interactions (user_id, feature, action, timestamp, metadata) VALUES (?, ?, ?, ?, ?)",
        (user_id, feature, action, now, metadata_json)
    )
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_advanced_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    stats = {}
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(*) FROM users")
    stats["total_users"] = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE last_seen >= datetime('now', '-1 day')")
    stats["active_users_24h"] = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE last_seen >= datetime('now', '-7 day')")
    stats["active_users_7d"] = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(message_count) FROM users")
    stats["total_messages"] = cursor.fetchone()[0] or 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
    cursor.execute("SELECT command, count FROM command_usage ORDER BY count DESC")
    stats["command_usage"] = {row[0]: row[1] for row in cursor.fetchall()}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    cursor.execute("""
    SELECT feature, COUNT(*) as count 
    FROM feature_interactions 
    GROUP BY feature 
    ORDER BY count DESC
    """)
    stats["feature_usage"] = {row[0]: row[1] for row in cursor.fetchall()}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    cursor.execute("""
    SELECT feature, action, COUNT(*) as count 
    FROM feature_interactions 
    GROUP BY feature, action 
    ORDER BY count DESC
    """)
    
    stats["action_usage"] = {}
    for row in cursor.fetchall():
        feature, action, count = row
        if feature not in stats["action_usage"]:
            stats["action_usage"][feature] = {}
        stats["action_usage"][feature][action] = count
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cursor.execute("""
    SELECT strftime('%Y-%m-%d', timestamp) as day, COUNT(*) as count 
    FROM feature_interactions 
    GROUP BY day 
    ORDER BY day DESC 
    LIMIT 7
    """)
    stats["daily_interactions"] = {row[0]: row[1] for row in cursor.fetchall()}
    
    conn.close()
    return stats

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ HTML
def format_stats_html(stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    html = "<b>üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    html += "<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    html += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    html += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['active_users_24h']}\n"
    html += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_users_7d']}\n"
    html += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
    html += "<b>üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:</b>\n"
    for cmd, count in stats['command_usage'].items():
        html += f"‚Ä¢ /{cmd}: {count}\n"
    html += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    html += "<b>üõ† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:</b>\n"
    for feature, count in stats['feature_usage'].items():
        html += f"‚Ä¢ {feature}: {count}\n"
    html += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    html += "<b>üîÑ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º:</b>\n"
    for feature, actions in stats['action_usage'].items():
        html += f"<b>{feature}:</b>\n"
        for action, count in actions.items():
            html += f"  ‚Ä¢ {action}: {count}\n"
    html += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    html += "<b>üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:</b>\n"
    for day, count in stats['daily_interactions'].items():
        html += f"‚Ä¢ {day}: {count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
    
    return html
