#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from database import Database
from config import ADMIN_USER_ID, MOOD_EMOJIS, BOT_INFO, NOTIFICATION_SETTINGS, RATE_LIMIT
from utils import rate_limit, format_datetime, get_user_mention, split_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ---
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = 0

# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
ASKING_QUESTION = 1
ADMIN_REPLYING = 2

# –¢–µ—Å—Ç—ã
CHOOSING_TEST = 1
CONFIRMING_TEST = 2
TAKING_TEST = 3
SHOWING_RESULT = 4

# –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏
CHOOSING_TECHNIQUE = 1
SHOWING_TECHNIQUE = 2

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
CHOOSING_MOOD = 1
ADDING_NOTES = 2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHANGING_SETTINGS = 1

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.register_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "start")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üß† –°–æ–≤–µ—Ç –¥–Ω—è"), KeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton("üõ† –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏"), KeyboardButton("üòä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")],
        [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ —ç–º–ø–∞—Ç–∏–∏
    welcome_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–∞—á–∞-–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—à–µ–≥–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.\n\n"
        f"üß† –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n"
        f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        f"‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ, —Å—Ç—Ä–µ—Å—Å–µ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö\n"
        f"‚Ä¢ –ü–æ–º–æ—á—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        f"‚Ä¢ –ü–µ—Ä–µ–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É (–∞–Ω–æ–Ω–∏–º–Ω–æ)\n\n"
        f"üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É {BOT_INFO['channel']} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
        f"ü§ù –ü–æ–º–Ω–∏—Ç–µ: –∑–∞–±–æ—Ç–∞ –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî —ç—Ç–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Å–∏–ª—ã, –∞ –Ω–µ —Å–ª–∞–±–æ—Å—Ç–∏. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏."
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "help")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    help_message = (
        "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/tip - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è\n"
        "/tests - –ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n"
        "/techniques - –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏\n"
        "/mood - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )
    
    await update.message.reply_text(help_message, parse_mode="Markdown")

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /about, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "about")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    about_message = (
        f"‚ÑπÔ∏è *–û –±–æ—Ç–µ {BOT_INFO['name']}*\n\n"
        f"–í–µ—Ä—Å–∏—è: {BOT_INFO['version']}\n\n"
        f"{BOT_INFO['description']}\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—à–µ–≥–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.\n\n"
        f"üîó *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª: {BOT_INFO['channel']}\n"
        f"‚Ä¢ –°–∞–π—Ç: {BOT_INFO['website']}\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É¬ª."
    )
    
    await update.message.reply_text(about_message, parse_mode="Markdown")

@rate_limit("daily_tip", RATE_LIMIT["daily_tip"])
async def daily_tip_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tip, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç –¥–Ω—è —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "tip")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tips_history = db.get_user_tips_history(user.id)
    recent_tips = [tip["tip_text"] for tip in tips_history]
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from data.tips import DAILY_TIPS
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    available_tips = [tip for tip in DAILY_TIPS if tip not in recent_tips]
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–æ–≤–µ—Ç—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if not available_tips:
        available_tips = DAILY_TIPS
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
    tip = random.choice(available_tips)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    db.save_daily_tip(user.id, tip)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    tip_message = (
        f"üß† *–°–æ–≤–µ—Ç –¥–Ω—è:*\n\n"
        f"{tip}\n\n"
        f"–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º —Å–æ–≤–µ—Ç–æ–º."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    keyboard = [
        [InlineKeyboardButton("üìö –ë–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", url=BOT_INFO["website"])]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(tip_message, parse_mode="Markdown", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---

async def ask_question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ask, –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "ask")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    user_questions = db.get_user_questions(user.id)
    unanswered_questions = [q for q in user_questions if q["status"] == NOTIFICATION_SETTINGS["new_question_emoji"]]
    
    if unanswered_questions:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∏—Ö, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤—Ä–∞—á—É. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    
    return ASKING_QUESTION

@rate_limit("anonymous_question", RATE_LIMIT["anonymous_question"])
async def save_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user = update.effective_user
    question_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    question_id = db.save_anonymous_question(user.id, question_text)
    
    if question_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä–∞—á—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        admin_notification = (
            f"{NOTIFICATION_SETTINGS['new_question_emoji']} *–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å*\n\n"
            f"*–í–æ–ø—Ä–æ—Å:* {question_text}\n\n"
            f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply_{question_id}"
        )
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=admin_notification,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def cancel_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    """
    await update.message.reply_text(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )
    
    return ConversationHandler.END

async def admin_reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    """
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ä–º–∞—Ç: /reply_123)
    command_parts = update.message.text.split('_')
    if len(command_parts) != 2:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply_ID")
        return ConversationHandler.END
    
    try:
        question_id = int(command_parts[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    question = db.get_question_by_id(question_id)
    
    if not question:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["question_id"] = question_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        f"*–í–æ–ø—Ä–æ—Å:* {question['question_text']}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        parse_mode="Markdown"
    )
    
    return ADMIN_REPLYING

async def save_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    answer_text = update.message.text
    question_id = context.user_data.get("question_id")
    
    if not question_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    question = db.get_question_by_id(question_id)
    
    if not question:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.save_question_answer(question_id, answer_text)
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_notification = (
            f"{NOTIFICATION_SETTINGS['answered_question_emoji']} *–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å*\n\n"
            f"*–í–∞—à –≤–æ–ø—Ä–æ—Å:* {question['question_text']}\n\n"
            f"*–û—Ç–≤–µ—Ç –≤—Ä–∞—á–∞:* {answer_text}\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ask."
        )
        
        try:
            await context.bot.send_message(
                chat_id=question["user_id"],
                text=user_notification,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def cancel_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    """
    await update.message.reply_text(
        "‚ùå –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω."
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if "question_id" in context.user_data:
        del context.user_data["question_id"]
    
    return ConversationHandler.END

async def list_questions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    filter_param = None
    if context.args and len(context.args) > 0:
        filter_param = context.args[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if filter_param == "new":
        questions = db.get_unanswered_questions()
        status_text = "–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"
    elif filter_param == "answered":
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = []  # –ó–∞–≥–ª—É—à–∫–∞
        status_text = "–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        questions = []  # –ó–∞–≥–ª—É—à–∫–∞
        status_text = "–≤—Å–µ—Ö"
    
    if not questions:
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ {status_text} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    message = f"üìã –°–ø–∏—Å–æ–∫ {status_text} –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
    
    for i, question in enumerate(questions, 1):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        short_question = question["question_text"][:50] + "..." if len(question["question_text"]) > 50 else question["question_text"]
        
        message += (
            f"{i}. {question['status']} ID: {question['question_id']}\n"
            f"   {short_question}\n"
            f"   –î–∞—Ç–∞: {format_datetime(question['date_asked'])}\n"
            f"   –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: /reply_{question['question_id']}\n\n"
        )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    for part in split_text(message):
        await update.message.reply_text(part)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ ---

async def tests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tests, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "tests")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("MDQ - –¢–µ—Å—Ç –Ω–∞ –±–∏–ø–æ–ª—è—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="test_mdq")],
        [InlineKeyboardButton("GAD-7 - –¢–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="test_gad7")],
        [InlineKeyboardButton("PHQ-9 - –¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é", callback_data="test_phq9")],
        [InlineKeyboardButton("PCL-5 - –¢–µ—Å—Ç –Ω–∞ –ü–¢–°–†", callback_data="test_pcl5")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="test_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return CHOOSING_TEST

async def test_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    test_type = query.data.split('_')[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
    if test_type == "cancel":
        await query.edit_message_text("‚ùå –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["test_type"] = test_type
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    from data.tests import TESTS_INFO
    test_info = TESTS_INFO.get(test_type, {})
    
    if not test_info:
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìä *{test_info['name']}*\n\n"
        f"{test_info['description']}\n\n"
        f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {test_info['time']} –º–∏–Ω—É—Ç\n"
        f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_info['questions'])}\n\n"
        f"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return CONFIRMING_TEST

@rate_limit("test", RATE_LIMIT["test"])
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.data == "confirm_no":
        await query.edit_message_text("‚ùå –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    test_type = context.user_data.get("test_type")
    
    if not test_type:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    from data.tests import TESTS_INFO
    test_info = TESTS_INFO.get(test_type, {})
    
    if not test_info:
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return ConversationHandler.END
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    context.user_data["test_answers"] = {}
    context.user_data["current_question"] = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_test_question(query, context)
    
    return TAKING_TEST

async def show_test_question(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    test_type = context.user_data.get("test_type")
    current_question = context.user_data.get("current_question", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    from data.tests import TESTS_INFO
    test_info = TESTS_INFO.get(test_type, {})
    
    if not test_info or current_question >= len(test_info["questions"]):
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = test_info["questions"][current_question]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for option_value, option_text in question["options"].items():
        keyboard.append([InlineKeyboardButton(option_text, callback_data=f"answer_{option_value}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = f"{current_question + 1}/{len(test_info['questions'])}"
    
    await query.edit_message_text(
        f"üìä *{test_info['name']}* (–í–æ–ø—Ä–æ—Å {progress})\n\n"
        f"{question['text']}",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def process_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    answer_value = query.data.split('_')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    test_type = context.user_data.get("test_type")
    current_question = context.user_data.get("current_question", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    from data.tests import TESTS_INFO
    test_info = TESTS_INFO.get(test_type, {})
    
    if not test_info:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    context.user_data["test_answers"][current_question] = answer_value
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    if current_question + 1 < len(test_info["questions"]):
        context.user_data["current_question"] = current_question + 1
        await show_test_question(query, context)
        return TAKING_TEST
    else:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        await calculate_test_result(query, context)
        return SHOWING_RESULT

async def calculate_test_result(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—ã
    test_type = context.user_data.get("test_type")
    answers = context.user_data.get("test_answers", {})
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    from data.tests import TESTS_INFO
    test_info = TESTS_INFO.get(test_type, {})
    
    if not test_info:
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    score = 0
    for question_idx, answer_value in answers.items():
        try:
            score += int(answer_value)
        except ValueError:
            pass
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    interpretation = ""
    for threshold, text in test_info["interpretations"]:
        if score >= threshold:
            interpretation = text
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.save_test_result(
        user_id=user.id,
        test_type=test_type,
        score=score,
        answers=answers,
        interpretation=interpretation
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = (
        f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ {test_info['name']}*\n\n"
        f"–í–∞—à –±–∞–ª–ª: *{score}*\n\n"
        f"*–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:*\n{interpretation}\n\n"
        f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    keyboard = [
        [InlineKeyboardButton("üß† –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=BOT_INFO["website"])]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        result_message,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫ —Å–∞–º–æ–ø–æ–º–æ—â–∏ ---

async def techniques_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /techniques, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫ —Å–∞–º–æ–ø–æ–º–æ—â–∏
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "techniques")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫
    from data.techniques import SELF_HELP_TECHNIQUES
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category_key, category_data in SELF_HELP_TECHNIQUES.items():
        keyboard.append([InlineKeyboardButton(category_key, callback_data=f"cat_{category_key}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cat_cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üõ† *–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Ö–Ω–∏–∫, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return CHOOSING_TECHNIQUE

async def show_techniques_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    category_key = query.data.split('_')[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
    if category_key == "cancel":
        await query.edit_message_text("‚ùå –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from data.techniques import SELF_HELP_TECHNIQUES
    category_data = SELF_HELP_TECHNIQUES.get(category_key)
    
    if not category_data:
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["selected_category"] = category_key
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
    keyboard = []
    for i, technique in enumerate(category_data["techniques"]):
        keyboard.append([InlineKeyboardButton(technique["name"], callback_data=f"tech_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="tech_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üõ† *{category_key}*\n\n"
        f"{category_data['description']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return SHOWING_TECHNIQUE

async def show_technique_detail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
    """
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if query.data == "tech_back":
        return await techniques_command(update, context)
    
    technique_idx = int(query.data.split('_')[1])
    category_key = context.user_data.get("selected_category")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ
    from data.techniques import SELF_HELP_TECHNIQUES
    category_data = SELF_HELP_TECHNIQUES.get(category_key)
    
    if not category_data or technique_idx >= len(category_data["techniques"]):
        await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return ConversationHandler.END
    
    technique = category_data["techniques"][technique_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Ö–Ω–∏–∫", callback_data="detail_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üõ† *{technique['name']}*\n\n"
        f"{technique['description']}",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return SHOWING_TECHNIQUE

async def back_to_techniques(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Ö–Ω–∏–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    category_key = context.user_data.get("selected_category")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é show_techniques_category
    new_query = query
    new_query.data = f"cat_{category_key}"
    
    return await show_techniques_category(update, context)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ---

async def mood_tracking_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /mood, –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "mood")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    keyboard = []
    for mood_key, mood_text in MOOD_EMOJIS.items():
        keyboard.append([InlineKeyboardButton(mood_text, callback_data=f"mood_{mood_key}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mood_cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üòä *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*\n\n"
        "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return CHOOSING_MOOD

async def process_mood_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    mood_key = query.data.split('_')[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
    if mood_key == "cancel":
        await query.edit_message_text("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["selected_mood"] = mood_key
    context.user_data["mood_emoji"] = MOOD_EMOJIS[mood_key].split()[0]
    context.user_data["mood_text"] = MOOD_EMOJIS[mood_key].split()[1]
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="notes_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏", callback_data="notes_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {MOOD_EMOJIS[mood_key]}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        reply_markup=reply_markup
    )
    
    return ADDING_NOTES

async def ask_for_mood_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    choice = query.data.split('_')[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫—É
    if choice == "no":
        return await save_mood_without_notes(update, context)
    
    await query.edit_message_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    
    return ADDING_NOTES

async def save_mood_with_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    """
    user = update.effective_user
    notes = update.message.text
    
    mood_emoji = context.user_data.get("mood_emoji")
    mood_text = context.user_data.get("mood_text")
    
    if not mood_emoji or not mood_text:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.save_mood(
        user_id=user.id,
        mood_emoji=mood_emoji,
        mood_text=mood_text,
        notes=notes
    )
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {mood_emoji} {mood_text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∑–∞–º–µ—Ç–∫–æ–π.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def save_mood_without_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫
    """
    query = update.callback_query
    user = query.from_user
    
    mood_emoji = context.user_data.get("mood_emoji")
    mood_text = context.user_data.get("mood_text")
    
    if not mood_emoji or not mood_text:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.save_mood(
        user_id=user.id,
        mood_emoji=mood_emoji,
        mood_text=mood_text
    )
    
    if success:
        await query.edit_message_text(
            f"‚úÖ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {mood_emoji} {mood_text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def cancel_mood_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    await update.message.reply_text(
        "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    
    return ConversationHandler.END

async def show_mood_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "mood_history")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    mood_history = db.get_user_mood_history(user.id)
    
    if not mood_history:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mood, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    message = "üìä *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*\n\n"
    
    for mood in mood_history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        date_str = format_datetime(mood["date_recorded"])
        notes = f"\n   _–ó–∞–º–µ—Ç–∫–∞: {mood['notes']}_" if mood["notes"] else ""
        
        message += f"{mood['mood_emoji']} {mood['mood_text']} - {date_str}{notes}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
    if len(mood_history) > 10:
        message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑ {len(mood_history)} –∑–∞–ø–∏—Å–µ–π._"
    
    await update.message.reply_text(message, parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /settings, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    db.log_command_usage(user.id, "settings")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = db.get_user_settings(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings['notifications_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}", 
            callback_data="settings_notifications"
        )],
        [InlineKeyboardButton(
            f"‚è∞ –í—Ä–µ–º—è —Å–æ–≤–µ—Ç–∞ –¥–Ω—è: {settings['daily_tip_time']}", 
            callback_data="settings_time"
        )],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="settings_close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    return CHANGING_SETTINGS

async def process_settings_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    setting_key = query.data.split('_')[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if setting_key == "close":
        await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = db.get_user_settings(user.id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if setting_key == "notifications":
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        new_value = not settings["notifications_enabled"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_settings(user.id, {"notifications_enabled": new_value})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        return await settings_command(update, context)
    
    elif setting_key == "time":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≤–µ—Ç–∞ –¥–Ω—è
        await query.edit_message_text(
            "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        context.user_data["changing_setting"] = "daily_tip_time"
        
        return CHANGING_SETTINGS
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    return await settings_command(update, context)

async def save_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    user = update.effective_user
    value = update.message.text
    
    setting_key = context.user_data.get("changing_setting")
    
    if not setting_key:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if setting_key == "daily_tip_time":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        import re
        if not re.match(r'^([01]\d|2[0-3]):([0-5]\d)$', value):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)."
            )
            return CHANGING_SETTINGS
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_settings(user.id, {setting_key: value})
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}."
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if "changing_setting" in context.user_data:
        del context.user_data["changing_setting"]
    
    return ConversationHandler.END

async def cancel_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    await update.message.reply_text(
        "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if "changing_setting" in context.user_data:
        del context.user_data["changing_setting"]
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥–∞–º
    """
    user = update.effective_user
    text = update.message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user_activity(user.id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞
    if text == "üß† –°–æ–≤–µ—Ç –¥–Ω—è":
        await daily_tip_command(update, context)
    elif text == "üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        await tests_command(update, context)
    elif text == "üõ† –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏":
        await techniques_command(update, context)
    elif text == "üòä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è":
        await mood_tracking_command(update, context)
    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É":
        await ask_question_command(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_command(update, context)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
    """
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        error_message = (
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id if update and update.effective_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text if update and update.message else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"–û—à–∏–±–∫–∞: {context.error}"
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=error_message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
