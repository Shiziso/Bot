#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import logging
import traceback
import re
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from config import ADMIN_USER_ID, MOOD_TRACKING_SETTINGS
from database import Database
from stats.stats_collector import StatsCollector
from utils import sanitize_input, format_datetime, format_mood_history, format_test_results, format_questions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_collector = StatsCollector(db)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECTING_TEST, ANSWERING_TEST, SHOWING_RESULT = range(3)
SELECTING_MOOD, ENTERING_NOTES = range(2)
SHOWING_CATEGORIES, SHOWING_TECHNIQUE = range(2)
ENTERING_QUESTION = range(1)
ADMIN_REPLYING = range(1)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
    """
    user = update.effective_user
    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/start")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.register_user(user_id, username, first_name, last_name)
    
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, "
        "–ø—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ–ø–æ–º–æ—â–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/help")
    
    help_text = (
        "üîç *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/test - –ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n"
        "/mood - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "/techniques - –¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏\n"
        "/question - –ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id == ADMIN_USER_ID:
        help_text += (
            "üëë *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
            "/questions - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/active_users [–¥–Ω–µ–π] - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            "/commands_stats [–¥–Ω–µ–π] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥\n\n"
        )
    
    help_text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel."
    
    await update.message.reply_text(
        help_text,
        parse_mode="Markdown"
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /about
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/about")
    
    from config import BOT_INFO
    
    about_text = (
        f"‚ÑπÔ∏è *{BOT_INFO['name']}*\n\n"
        f"–í–µ—Ä—Å–∏—è: {BOT_INFO['version']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {BOT_INFO['description']}\n\n"
        f"–ê–≤—Ç–æ—Ä: {BOT_INFO['author']}\n"
        f"–°–∞–π—Ç: {BOT_INFO['website']}\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏. "
        "–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã "
        "–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ–ø–æ–º–æ—â–∏."
    )
    
    await update.message.reply_text(
        about_text,
        parse_mode="Markdown"
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ---
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /test
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/test")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        {"id": "anxiety", "name": "–¢–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å (GAD-7)"},
        {"id": "depression", "name": "–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é (PHQ-9)"},
        {"id": "stress", "name": "–¢–µ—Å—Ç –Ω–∞ —Å—Ç—Ä–µ—Å—Å (PSS-10)"},
        {"id": "ptsd", "name": "–¢–µ—Å—Ç –Ω–∞ –ü–¢–°–† (PCL-5)"}
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
    keyboard = []
    for test in tests:
        keyboard.append([InlineKeyboardButton(test["name"], callback_data=f"test_{test['id']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìù *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_TEST

async def select_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = query.data.replace("test_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ—Å—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_test"] = test_id
    context.user_data["current_question"] = 0
    context.user_data["answers"] = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    from data.tests import TESTS
    
    if test_id not in TESTS:
        await query.edit_message_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END
    
    test_data = TESTS[test_id]
    questions = test_data["questions"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question_index = context.user_data["current_question"]
    question = questions[question_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for i, option in enumerate(question["options"]):
        keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{i}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù *{test_data['name']}*\n\n"
        f"–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(questions)}:\n"
        f"{question['text']}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ANSWERING_TEST

async def process_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_index = int(query.data.replace("answer_", ""))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    context.user_data["answers"].append(answer_index)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Ç–µ—Å—Ç–µ
    test_id = context.user_data["selected_test"]
    from data.tests import TESTS
    test_data = TESTS[test_id]
    questions = test_data["questions"]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    context.user_data["current_question"] += 1
    question_index = context.user_data["current_question"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if question_index < len(questions):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = questions[question_index]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for i, option in enumerate(question["options"]):
            keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{i}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìù *{test_data['name']}*\n\n"
            f"–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(questions)}:\n"
            f"{question['text']}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return ANSWERING_TEST
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        score = sum(context.user_data["answers"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        interpretation = ""
        for threshold in test_data["thresholds"]:
            if score >= threshold["min"] and score <= threshold["max"]:
                interpretation = threshold["interpretation"]
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = update.effective_user.id
        db.save_test_result(
            user_id,
            test_id,
            score,
            str(context.user_data["answers"]),
            interpretation
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ", callback_data=f"result_{test_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –±–∞–ª–ª–æ–≤\n\n"
            f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–∞—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SHOWING_RESULT

async def show_test_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = query.data.replace("result_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–µ
    from data.tests import TESTS
    test_data = TESTS[test_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    score = sum(context.user_data["answers"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    interpretation = ""
    recommendations = ""
    for threshold in test_data["thresholds"]:
        if score >= threshold["min"] and score <= threshold["max"]:
            interpretation = threshold["interpretation"]
            recommendations = threshold.get("recommendations", "")
            break
    
    result_text = (
        f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: {test_data['name']}*\n\n"
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –±–∞–ª–ª–æ–≤\n\n"
        f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}\n\n"
    )
    
    if recommendations:
        result_text += f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}\n\n"
    
    result_text += (
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–∏–∞–≥–Ω–æ–∑–æ–º. "
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
    )
    
    await query.edit_message_text(
        result_text,
        parse_mode="Markdown"
    )
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ---
async def mood_tracking_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /mood
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/mood")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    keyboard = []
    row = []
    
    for i, (mood_id, emoji) in enumerate(MOOD_TRACKING_SETTINGS["mood_emojis"].items()):
        row.append(InlineKeyboardButton(emoji, callback_data=f"mood_{mood_id}"))
        
        # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if (i + 1) % 3 == 0 or i == len(MOOD_TRACKING_SETTINGS["mood_emojis"]) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
    keyboard.append([InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data="history")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üòä *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*\n\n"
        "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è? –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_MOOD

async def select_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ callback_data
    mood_id = query.data.replace("mood_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_mood"] = mood_id
    context.user_data["mood_emoji"] = MOOD_TRACKING_SETTINGS["mood_emojis"][mood_id]
    context.user_data["mood_text"] = MOOD_TRACKING_SETTINGS["mood_texts"][mood_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {context.user_data['mood_emoji']} {context.user_data['mood_text']}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? "
        f"–ù–∞–ø–∏—à–∏—Ç–µ –µ—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=reply_markup
    )
    
    return ENTERING_NOTES

async def save_mood_with_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    """
    notes = sanitize_input(update.message.text)  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["mood_notes"] = notes
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    mood_emoji = context.user_data["mood_emoji"]
    mood_text = context.user_data["mood_text"]
    
    db.save_mood(user_id, mood_emoji, mood_text, notes)
    
    await update.message.reply_text(
        f"‚úÖ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ({mood_emoji} {mood_text}) –∏ –∑–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."
    )
    
    return ConversationHandler.END

async def save_mood_without_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫
    """
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    mood_emoji = context.user_data["mood_emoji"]
    mood_text = context.user_data["mood_text"]
    
    db.save_mood(user_id, mood_emoji, mood_text, "")
    
    await query.edit_message_text(
        f"‚úÖ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ({mood_emoji} {mood_text}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."
    )
    
    return ConversationHandler.END

async def show_mood_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    mood_history = db.get_mood_history(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    history_text = format_mood_history(mood_history)
    
    await query.edit_message_text(
        history_text,
        parse_mode="Markdown"
    )
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫ —Å–∞–º–æ–ø–æ–º–æ—â–∏ ---
async def techniques_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /techniques
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/techniques")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫
    from data.techniques import TECHNIQUE_CATEGORIES
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category_id, category in TECHNIQUE_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(category["name"], callback_data=f"cat_{category_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üßò *–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Ö–Ω–∏–∫, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SHOWING_CATEGORIES

async def show_techniques_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = query.data.replace("cat_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_category"] = category_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞—Ö
    from data.techniques import TECHNIQUE_CATEGORIES, TECHNIQUES
    
    category = TECHNIQUE_CATEGORIES[category_id]
    techniques = [tech for tech in TECHNIQUES if tech["category_id"] == category_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏
    keyboard = []
    for technique in techniques:
        keyboard.append([InlineKeyboardButton(technique["name"], callback_data=f"tech_{technique['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="tech_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üßò *{category['name']}*\n\n"
        f"{category['description']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SHOWING_TECHNIQUE

async def show_technique_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ callback_data
    technique_id = int(query.data.replace("tech_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–Ω–∏–∫–µ
    from data.techniques import TECHNIQUES
    
    technique = next((t for t in TECHNIQUES if t["id"] == technique_id), None)
    
    if not technique:
        await query.edit_message_text(
            "‚ùå –¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return SHOWING_CATEGORIES
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Ö–Ω–∏–∫", callback_data=f"cat_{technique['category_id']}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏–∫–∏
    technique_text = (
        f"üßò *{technique['name']}*\n\n"
        f"{technique['description']}\n\n"
        f"*–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:*\n{technique['instructions']}\n\n"
    )
    
    if technique.get("benefits"):
        technique_text += f"*–ü–æ–ª—å–∑–∞:*\n{technique['benefits']}\n\n"
    
    if technique.get("tips"):
        technique_text += f"*–°–æ–≤–µ—Ç—ã:*\n{technique['tips']}"
    
    await query.edit_message_text(
        technique_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SHOWING_TECHNIQUE

async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ö–Ω–∏–∫
    from data.techniques import TECHNIQUE_CATEGORIES
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = []
    for category_id, category in TECHNIQUE_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(category["name"], callback_data=f"cat_{category_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üßò *–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Ö–Ω–∏–∫, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SHOWING_CATEGORIES

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---
async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /question
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/question")
    
    await update.message.reply_text(
        "‚ùì *–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. "
        "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.",
        parse_mode="Markdown"
    )
    
    return ENTERING_QUESTION

async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    question_text = sanitize_input(update.message.text)  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
    from config import ANONYMOUS_QUESTIONS_SETTINGS
    
    if len(question_text) > ANONYMOUS_QUESTIONS_SETTINGS["max_question_length"]:
        await update.message.reply_text(
            f"‚ùå –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - "
            f"{ANONYMOUS_QUESTIONS_SETTINGS['max_question_length']} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ENTERING_QUESTION
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å
    questions_today = db.get_user_questions_count_today(user_id)
    
    if questions_today >= ANONYMOUS_QUESTIONS_SETTINGS["max_questions_per_day"]:
        await update.message.reply_text(
            f"‚ùå –í—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è "
            f"({ANONYMOUS_QUESTIONS_SETTINGS['max_questions_per_day']}).\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    question_id = db.save_question(user_id, question_text)
    
    if not question_id:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å #{question_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"‚ùóÔ∏è *–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å*\n\n"
                 f"–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: #{question_id}\n"
                 f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                 f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                 f"–í–æ–ø—Ä–æ—Å: {question_text}\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /questions –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ---
async def show_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."
        )
        return ConversationHandler.END
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/questions")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    unanswered_questions = db.get_unanswered_questions()
    
    if not unanswered_questions:
        await update.message.reply_text(
            "‚úÖ –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    keyboard = []
    for question in unanswered_questions:
        keyboard.append([InlineKeyboardButton(
            f"#{question['question_id']} - {question['question_text'][:30]}...",
            callback_data=f"q_{question['question_id']}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìù *–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ADMIN_REPLYING

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(query.data.replace("q_", ""))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_question_id"] = question_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    question_data = db.get_question_by_id(question_id)
    
    if not question_data:
        await query.edit_message_text(
            "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω."
        )
        return ConversationHandler.END
    
    await query.edit_message_text(
        f"üìù *–í–æ–ø—Ä–æ—Å #{question_id}*\n\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question_data['user_id']}\n"
        f"–î–∞—Ç–∞: {format_datetime(question_data['date_asked'])}\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question_data['question_text']}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    
    return ADMIN_REPLYING

async def save_question_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    """
    question_id = context.user_data.get("selected_question_id")
    answer_text = sanitize_input(update.message.text)  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    
    if not question_id:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    question_data = db.get_question_by_id(question_id)
    
    if not question_data:
        await update.message.reply_text(
            "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω."
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.save_question_answer(question_id, answer_text):
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=question_data["user_id"],
            text=f"‚úÖ *–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å*\n\n"
                 f"–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: #{question_id}\n"
                 f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {question_data['question_text']}\n\n"
                 f"–û—Ç–≤–µ—Ç: {answer_text}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π ---
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, "/cancel")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )
    
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    """
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    stats_collector.log_command_usage(user_id, update.message.text)
    
    await update.message.reply_text(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    error_traceback = traceback.format_exception(None, context.error, context.error.__traceback__)
    error_text = ''.join(error_traceback)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}\n{error_text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        error_message = (
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id if update and update.effective_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text if update and update.message else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"–û—à–∏–±–∫–∞: {context.error}\n\n"
            f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: ```{error_text[:1000]}```"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=error_message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
