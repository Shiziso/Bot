#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import re
import time
import logging
import traceback
from datetime import datetime
from functools import wraps
from typing import Callable, Dict, Any, List, Optional

from telegram import Update
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def rate_limit(key: str, limit_seconds: int) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        key: –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        limit_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    def decorator(func: Callable) -> Callable:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_used = {}
        
        @wraps(func)
        async def wrapper(update, context, *args, **kwargs):
            user_id = update.effective_user.id
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏
            user_key = f"{user_id}_{key}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = time.time()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            keys_to_remove = []
            for k, v in last_used.items():
                if current_time - v > 86400:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    keys_to_remove.append(k)
            
            for k in keys_to_remove:
                del last_used[k]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if user_key in last_used and current_time - last_used[user_key] < limit_seconds:
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                remaining_time = int(limit_seconds - (current_time - last_used[user_key]))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                if remaining_time < 60:
                    time_str = f"{remaining_time} —Å–µ–∫—É–Ω–¥"
                elif remaining_time < 3600:
                    time_str = f"{remaining_time // 60} –º–∏–Ω—É—Ç"
                else:
                    time_str = f"{remaining_time // 3600} —á–∞—Å–æ–≤"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å
                await update.message.reply_text(
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {time_str} –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            last_used[user_key] = current_time
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, context, *args, **kwargs)
        
        return wrapper
    
    return decorator

def format_datetime(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        dt: –û–±—ä–µ–∫—Ç datetime
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    """
    if not dt:
        return ""
    
    return dt.strftime("%d.%m.%Y %H:%M")

def split_text(text: str, max_length: int = 4096) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    for i in range(0, len(text), max_length):
        parts.append(text[i:i + max_length])
    
    return parts

def sanitize_input(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    text = re.sub(r'<[^>]*>', '', text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    markdown_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in markdown_chars:
        text = text.replace(char, '\\' + char)
    
    return text

def format_mood_history(mood_history: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        mood_history: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not mood_history:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏."
    
    result = "üìä *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n\n"
    
    for i, mood in enumerate(mood_history):
        date = mood["date_recorded"].strftime("%d.%m.%Y %H:%M")
        result += f"{i+1}. {date} - {mood['mood_emoji']} {mood['mood_text']}\n"
        
        if mood["notes"]:
            result += f"   _–ó–∞–º–µ—Ç–∫–∞: {mood['notes']}_\n"
        
        result += "\n"
    
    return result

def format_test_results(test_results: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        test_results: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not test_results:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
    
    result = "üìù *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤:*\n\n"
    
    for i, test in enumerate(test_results):
        date = test["date_taken"].strftime("%d.%m.%Y %H:%M")
        result += f"{i+1}. {date} - {test['test_type']}\n"
        result += f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {test['score']} –±–∞–ª–ª–æ–≤\n"
        result += f"   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {test['interpretation']}\n\n"
    
    return result

def format_questions(questions: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        questions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–ø—Ä–æ—Å–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not questions:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    
    result = "‚ùì *–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
    
    for i, question in enumerate(questions):
        date = question["date_asked"].strftime("%d.%m.%Y %H:%M")
        status = question["status"] if question["status"] else "‚è≥"
        
        result += f"{i+1}. {date} - {status}\n"
        result += f"   –í–æ–ø—Ä–æ—Å: {question['question_text']}\n"
        
        if question["answer_text"]:
            result += f"   –û—Ç–≤–µ—Ç: {question['answer_text']}\n"
        
        result += "\n"
    
    return result

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    error_traceback = traceback.format_exception(None, context.error, context.error.__traceback__)
    error_text = ''.join(error_traceback)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}\n{error_text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        from config import ADMIN_USER_ID
        
        error_message = (
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id if update and update.effective_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text if update and update.message else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"–û—à–∏–±–∫–∞: {context.error}\n\n"
            f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: ```{error_text[:1000]}```"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=error_message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

def get_user_mention(user) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user.username:
        return f"@{user.username}"
    else:
        return f"[{user.first_name}](tg://user?id={user.id})"
