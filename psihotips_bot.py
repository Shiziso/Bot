#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
import os
import threading # Added for running bot in a separate thread
from flask import Flask # Added for Render Web Service
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Configuration for Bot and Admin ---
TOKEN = os.getenv("TOKEN") # Get TOKEN from environment variable
ADMIN_USER_ID_STR = os.getenv("ADMIN_USER_ID") # Get ADMIN_USER_ID from environment variable
ADMIN_USER_ID = int(ADMIN_USER_ID_STR) if ADMIN_USER_ID_STR else None

# --- Flask App for Render Web Service ---
flask_app = Flask(__name__)

@flask_app.route('/')
def hello_world():
    return 'Telegram Bot is running!'

# --- Data for features (can be expanded or moved to separate files/DB later) ---
DAILY_TIPS = [
    "–ù–∞–π–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è.",
    "–ó–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
    "–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —É–º–∞ –∏ —Ç–µ–ª–∞.",
    "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–±–æ–ª—Ç–∞—Ç—å. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –≤–∞–∂–Ω—ã.",
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—É—é –∫–æ—Ä–æ—Ç–∫—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é. –í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –º–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
    "–£–¥–µ–ª–∏—Ç–µ 15 –º–∏–Ω—É—Ç —Ö–æ–±–±–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.",
    "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ–±–µ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é. –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É.",
    "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –æ—â—É—â–µ–Ω–∏—è—Ö –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å –Ω–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
    "–í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã. –ò–Ω–æ–≥–¥–∞ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ, —á–µ–º –º—ã –¥—É–º–∞–µ–º.",
    "–£–ª—ã–±–Ω–∏—Ç–µ—Å—å —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–µ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
]

SELF_HELP_TECHNIQUES = {
    "–¥—ã—Ö–∞–Ω–∏–µ": "**–¢–µ—Ö–Ω–∏–∫–∞ –¥–∏–∞—Ñ—Ä–∞–≥–º–∞–ª—å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è:**\n1. –°—è–¥—å—Ç–µ –∏–ª–∏ –ª—è–≥—Ç–µ –≤ —É–¥–æ–±–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n2. –ü–æ–ª–æ–∂–∏—Ç–µ –æ–¥–Ω—É —Ä—É–∫—É –Ω–∞ –≥—Ä—É–¥—å, –¥—Ä—É–≥—É—é –Ω–∞ –∂–∏–≤–æ—Ç.\n3. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ—Å, —Å—Ç–∞—Ä–∞—è—Å—å, —á—Ç–æ–±—ã –∂–∏–≤–æ—Ç –ø–æ–¥–Ω—è–ª—Å—è, –∞ –≥—Ä—É–¥—å –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –ø–æ—á—Ç–∏ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ–π.\n4. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç, —á—É–≤—Å—Ç–≤—É—è, –∫–∞–∫ –∂–∏–≤–æ—Ç –æ–ø—É—Å–∫–∞–µ—Ç—Å—è.\n5. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.",
    "—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è": "**–¢–µ—Ö–Ω–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –º—ã—à–µ—á–Ω–æ–π —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏:**\n1. –°—è–¥—å—Ç–µ –∏–ª–∏ –ª—è–≥—Ç–µ —É–¥–æ–±–Ω–æ.\n2. –ù–∞—á–Ω–∏—Ç–µ —Å –ø–∞–ª—å—Ü–µ–≤ –Ω–æ–≥: —Å–∏–ª—å–Ω–æ –Ω–∞–ø—Ä—è–≥–∏—Ç–µ –∏—Ö –Ω–∞ 5 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ –Ω–∞ 10-15 —Å–µ–∫—É–Ω–¥. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ –æ—â—É—â–µ–Ω–∏—è—Ö.\n3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ—Å—å –≤–≤–µ—Ä—Ö –ø–æ —Ç–µ–ª—É (–∏–∫—Ä—ã, –±–µ–¥—Ä–∞, –∂–∏–≤–æ—Ç, –≥—Ä—É–¥—å, —Ä—É–∫–∏, –ø–ª–µ—á–∏, —à–µ—è, –ª–∏—Ü–æ), –Ω–∞–ø—Ä—è–≥–∞—è –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—è –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü.\n4. –ó–∞–≤–µ—Ä—à–∏—Ç–µ, –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–≤ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ–º —Ç–µ–ª–µ.",
    "–∑–∞–∑–µ–º–ª–µ–Ω–∏–µ": "**–¢–µ—Ö–Ω–∏–∫–∞ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è '5-4-3-2-1':**\n–ö–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è:\n- 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–ª, —Ü–≤–µ—Ç–æ–∫, —Ä—É—á–∫–∞, –æ–∫–Ω–æ, –∫–Ω–∏–≥–∞).\n- 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–æ–≥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∫–∞–Ω—å –æ–¥–µ–∂–¥—ã, –≥–ª–∞–¥–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∞, —Ç–µ–ø–ª–æ —á–∞—à–∫–∏, —Å–≤–æ–∏ –≤–æ–ª–æ—Å—ã).\n- 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–ª—ã—à–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ–Ω–∏–µ –ø—Ç–∏—Ü, —à—É–º –º–∞—à–∏–Ω, —Ç–∏–∫–∞–Ω—å–µ —á–∞—Å–æ–≤).\n- 2 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–Ω—é—Ö–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∞—Ö –∫–æ—Ñ–µ, —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö, –¥—É—Ö–∏).\n- 1 –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞ –≤–∫—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—è—Ç–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ç–∞, –≤–æ–¥–∞, —Ñ—Ä—É–∫—Ç)."
}

# --- Helper Functions ---
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è ‚ú®")],
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üìù"), KeyboardButton("–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ üßò")],
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/–ø—Ä–∏–≤—ã—á–∫—É üòä"), KeyboardButton("–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚ùì")],
        [KeyboardButton("–ü–æ–º–æ—â—å / –û –±–æ—Ç–µ ‚ÑπÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- Command Handlers ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–≤–µ—Ç–æ–º, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫—É —Å–∞–º–æ–ø–æ–º–æ—â–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.",
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n"
        "üîπ **–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è ‚ú®** - –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
        "üîπ **–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üìù** - –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n"
        "üîπ **–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ üßò** - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ —Ç–µ—Ö–Ω–∏–∫–∞–º —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –¥—Ä.\n"
        "üîπ **–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/–ø—Ä–∏–≤—ã—á–∫—É üòä** - –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n"
        "üîπ **–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚ùì** - –ê–Ω–æ–Ω–∏–º–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n"
        "üîπ **/start** - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n"
        "üîπ **/help** - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ö–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞: @psihotips"
    )
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard(), parse_mode='Markdown')

async def daily_tip_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tip = random.choice(DAILY_TIPS)
    await update.message.reply_text(f"‚ú® **–°–æ–≤–µ—Ç –¥–Ω—è:**\n\n{tip}", parse_mode='Markdown', reply_markup=get_main_keyboard())

# --- Feature: Anonymous Questions ---
ASK_QUESTION_STATE = 1

async def ask_anonymous_question_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not ADMIN_USER_ID:
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∞–Ω–æ–Ω–∏–º–Ω–æ. \n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/cancel")]], resize_keyboard=True, one_time_keyboard=True)
    )
    return ASK_QUESTION_STATE

async def process_anonymous_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_question = update.message.text
    user_info = update.effective_user
    
    if not ADMIN_USER_ID:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_main_keyboard())
        return ConversationHandler.END

    try:
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"‚ùì –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{user_question}\n\n(ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: {user_info.id})"
        )
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send anonymous question to admin: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

# --- Feature: Self-Help Techniques ---
async def self_help_techniques_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    buttons = [[InlineKeyboardButton(name.capitalize(), callback_data=f"technique_{key}")] for key, name in SELF_HELP_TECHNIQUES.items()]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="technique_main_menu")])
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É —Å–∞–º–æ–ø–æ–º–æ—â–∏:", reply_markup=reply_markup)

async def self_help_technique_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data is None or not isinstance(query.data, str):
        logger.warning(f"Received unexpected callback_data: {query.data}")
        if query.message:
            await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_keyboard())
        return

    parts = query.data.split('_', 1)
    action = parts[0]
    key = parts[1] if len(parts) > 1 else None

    if action == "technique" and key == "main_menu":
        if query.message:
            await query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=None)
            await context.bot.send_message(chat_id=query.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return
    elif action == "technique" and key in SELF_HELP_TECHNIQUES:
        technique_text = SELF_HELP_TECHNIQUES.get(key)
        if query.message:
            await query.edit_message_text(text=technique_text, parse_mode='Markdown', reply_markup=None)
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_keyboard())
    else:
        if query.message:
            await query.edit_message_text(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ—Ö–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_keyboard())

# --- Feature: Psychological Tests (Placeholder) ---
async def tests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–†–∞–∑–¥–µ–ª —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!", reply_markup=get_main_keyboard())

# --- Feature: Mood/Habit Tracker (Placeholder) ---
async def mood_tracker_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", reply_markup=get_main_keyboard())

# --- Message Handler for Keyboard Buttons ---
async def handle_keyboard_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return
    text = update.message.text
    if text == "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è ‚ú®":
        await daily_tip_command(update, context)
    elif text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üìù":
        await tests_command(update, context)
    elif text == "–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ üßò":
        await self_help_techniques_menu(update, context)
    elif text == "–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/–ø—Ä–∏–≤—ã—á–∫—É üòä":
        await mood_tracker_command(update, context)
    elif text == "–ü–æ–º–æ—â—å / –û –±–æ—Ç–µ ‚ÑπÔ∏è":
        await help_command(update, context)

# --- Telegram Bot Application Setup ---
def run_telegram_bot():
    if not TOKEN:
        logger.error("Telegram TOKEN not found in environment variables!")
        return
    if not ADMIN_USER_ID:
        logger.warning("ADMIN_USER_ID not found or invalid in environment variables! Anonymous questions might not work.")

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("daily_tip", daily_tip_command))
    application.add_handler(CommandHandler("tests", tests_command))
    application.add_handler(CommandHandler("mood_tracker", mood_tracker_command))
    application.add_handler(CommandHandler("techniques", self_help_techniques_menu))

    conv_handler_anonymous_question = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚ùì$'), ask_anonymous_question_start), CommandHandler('ask', ask_anonymous_question_start)],
        states={
            ASK_QUESTION_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_anonymous_question)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    application.add_handler(conv_handler_anonymous_question)
    application.add_handler(CallbackQueryHandler(self_help_technique_callback, pattern='^technique_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keyboard_buttons))

    logger.info("Telegram Bot is starting polling...")
    application.run_polling()

# --- Main Execution ---
if __name__ == "__main__":
    # Start Telegram bot in a new thread
    bot_thread = threading.Thread(target=run_telegram_bot)
    bot_thread.start()
    
    # Start Flask web server for Render
    port = int(os.environ.get("PORT", 5000)) # Render provides PORT, default to 5000 for local testing
    logger.info(f"Flask app starting on port {port}")
    flask_app.run(host='0.0.0.0', port=port)


